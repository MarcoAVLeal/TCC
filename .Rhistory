12.596E0        128.48E0
13.303E0        141.94E0
13.922E0        156.92E0
14.440E0        171.65E0
14.951E0        190.00E0
15.627E0        223.26E0
15.639E0        223.88E0
15.814E0        231.50E0
16.315E0        265.05E0
16.334E0        269.44E0
16.430E0        271.78E0
16.423E0        273.46E0
17.024E0        334.61E0
17.009E0        339.79E0
17.165E0        349.52E0
17.134E0        358.18E0
17.349E0        377.98E0
17.576E0        394.77E0
17.848E0        429.66E0
18.090E0        468.22E0
18.276E0        487.27E0
18.404E0        519.54E0
18.519E0        523.03E0
19.133E0        612.99E0
19.074E0        638.59E0
19.239E0        641.36E0
19.280E0        622.05E0
19.101E0        631.50E0
19.398E0        663.97E0
19.252E0        646.9E0
19.89E0         748.29E0
20.007E0        749.21E0
19.929E0        750.14E0
19.268E0        647.04E0
19.324E0        646.89E0
20.049E0        746.9E0
20.107E0        748.43E0
20.062E0        747.35E0
20.065E0        749.27E0
19.286E0        647.61E0
19.972E0        747.78E0
20.088E0        750.51E0
20.743E0        851.37E0
20.83E0         845.97E0
20.935E0        847.54E0
21.035E0        849.93E0
20.93E0         851.61E0
21.074E0        849.75E0
21.085E0        850.98E0
20.935E0        848.23E0
"
))
x1            <- dados$V2
y             <- dados$V1
dados         <- data.frame(x = x1,  y = y)
x = dados$x
y = dados$y
#plot.curves(x = x1,y = y)
plot.curves(x = dados$x,y = dados$y,labelx = "Temperatura (ºKelvin)",labely = "Coeficiente de Exp. Térmica",title = NULL)
#plot.curves(x = x3,y = y)
number_of_bins   = seq(0.1,0.2,0.01)
number_of_bins   = seq(0.1,0.25,0.01)
number_of_bins   = seq(0.1,0.29,0.01)
### Loess LOOCV
df        <- cbind(x= dados$x,y = dados$y) %>% as.data.frame
tr= 1:nrow(df)
dftr= df[tr,]
number_of_bins   = seq(0.1,0.29,0.01)
number_of_bins_sp= 1:length(number_of_bins)
cv.errors.loess  = matrix( NA,nrow =  nrow(df), ncol = length(number_of_bins) )
cv.errors.kernel = matrix( NA,nrow =  nrow(df), ncol = length(number_of_bins) )
cv.errors.sp1    = matrix( NA,nrow =  nrow(df), ncol = length(number_of_bins_sp) )
cv.errors.sp3    = matrix( NA,nrow =  nrow(df), ncol = length(number_of_bins_sp) )
cv.errors.poly   = matrix( NA,nrow =  nrow(df), ncol = length(number_of_bins_sp) )
for( i in 1:length(number_of_bins)){ # for each number of knots to test
for( j in tr ){ # for each fold
fit.loess              <- loess(y ~ x,degree=1, span = number_of_bins[i], data=df[tr!=j,])
loess.pred             = predict( fit.loess, newdata=data.frame(x = df$x[tr==j]) )
cv.errors.loess[j,i]   = mean( ( df$y[tr==j] - loess.pred )^2,na.rm = TRUE )
fit.kernel             <- locfit(y ~ x,deg=1, alpha = number_of_bins[i],kern="gauss", data=df[tr!=j,])
kernel.pred            <- predict( fit.kernel, newdata=data.frame(x = df$x[tr==j]) )
cv.errors.kernel[j,i]  <- mean( ( df$y[tr==j] - kernel.pred )^2,na.rm = TRUE )
p              <-  seq(1,(i),1)/(i+1)
knots          <-  quantile(df$x[tr!=j]  , p = p)
fit.spg1       <-  ols(as.formula(glue::glue("y ~ lsp(x, knots)")), data=df[tr!=j,])
spg1.pred    <- predict( fit.spg1, newdata=data.frame(x = df$x[tr==j]) )
cv.errors.sp1[j,i] <- mean( ( df$y[tr==j] - spg1.pred )^2,na.rm = TRUE )
#p              <-  seq(1,i-1,1)/i
knots          <-  quantile(df$x[tr!=j]  , p = p)
fit.spg3       <- lm(y ~ bs(x, knots = knots), data=df[tr!=j,] )
spg3.pred      <- predict( fit.spg3, newdata=data.frame(x = df$x[tr==j]) )
cv.errors.sp3[j,i] <- mean( ( df$y[tr==j] - spg3.pred )^2,na.rm = TRUE )
fit.poly <- lm(y ~ poly(x,i))
poly.pred      <- predict( fit.poly, newdata=data.frame(x = df$x[tr==j]) )
cv.errors.poly[j,i] <- mean( ( df$y[tr==j] - poly.pred )^2,na.rm = TRUE )
}}
cv.errors.mean.sp1   = apply(cv.errors.sp1,2,mean,na.rm = TRUE)
min.cv.index.sp1     = which.min( cv.errors.mean.sp1 )
cv.min.sp1           = cv.errors.mean.sp1[min.cv.index.sp1]
par.sp1              = number_of_bins_sp[min.cv.index.sp1]
cv.errors.mean.sp3   = apply(cv.errors.sp3,2,mean,na.rm = TRUE)
min.cv.index.sp3     = which.min( cv.errors.mean.sp3 )
cv.min.sp3           = cv.errors.mean.sp3[min.cv.index.sp3]
par.sp3              = number_of_bins_sp[min.cv.index.sp3]
cv.errors.mean.loess   = apply(cv.errors.loess,2,mean,na.rm = TRUE)
min.cv.index.loess     = which.min( cv.errors.mean.loess )
cv.min.loess           = cv.errors.mean.loess[min.cv.index.loess]
par.loess              = number_of_bins[min.cv.index.loess]
### Kernel (Nadaraya-Watson) LOOCV
cv.errors.mean.kernel  = apply(cv.errors.kernel,2,mean,na.rm = TRUE)
min.cv.index.kernel    = which.min( cv.errors.mean.kernel )
cv.min.kernel          = cv.errors.mean.kernel[min.cv.index.kernel]
par.kernel              = number_of_bins[min.cv.index.kernel]
cv.errors.mean.poly  = apply(cv.errors.poly,2,mean,na.rm = TRUE)
min.cv.index.poly    = which.min( cv.errors.mean.poly )
cv.min.poly          = cv.errors.mean.poly[min.cv.index.poly]
par.poly              = number_of_bins_sp[min.cv.index.poly]
mt <- c()
mt <- rbind(mt,c(cv.min.kernel,cv.min.loess,cv.min.sp1,cv.min.sp3,cv.min.poly,par.loess,par.kernel,par.sp1,par.sp3,par.poly))
df <- data.frame(x = x, y = y)
df1 <- data.frame(x = number_of_bins, y = cv.errors.mean.kernel,EQM = cv.errors.mean.kernel)
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
p4.cv <-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM") +
geom_vline(xintercept = par.kernel,color ="red")+
annotate("text",x = number_of_bins[min.cv.index.kernel]+0.05,y = max(cv.errors.mean.kernel)*0.9,label=paste0("Span:",number_of_bins[min.cv.index.kernel],"\nEQM:",round(cv.min.kernel,4))) +
axis.theme()
par4 = number_of_bins[min.cv.index.kernel]
### Kernel (Nadaraya-Watson) LOOCV
df <- data.frame(x = x, y = y)
df1 <- data.frame(x = number_of_bins, y = cv.errors.mean.loess,EQM = cv.errors.mean.loess)
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
p5.cv <-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM") +
geom_vline(xintercept = par.loess,color ="red")+
annotate("text",x = number_of_bins[min.cv.index.loess]+0.05,y = max(cv.errors.mean.loess)*0.9,label=paste0("Span:",number_of_bins[min.cv.index.loess],"\nEQM:",round(cv.min.loess,4))) +
axis.theme()
par5 = number_of_bins[min.cv.index.loess]
df <- data.frame(x = dados$x, y = dados$y)
df1 <- data.frame(x = number_of_bins_sp, y = cv.errors.mean.sp1,EQM = cv.errors.mean.sp1)
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
p6.cv <-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM") +
geom_vline(xintercept = number_of_bins_sp[min.cv.index.sp1],color ="red")+
annotate("text",x = number_of_bins_sp[min.cv.index.sp1]-5,y = max(cv.errors.mean.sp1)*0.90,label=paste0("Nº Nós:",par.sp1,"\nEQM:",round(cv.min.sp1,4))) +
axis.theme()
par6 = number_of_bins[min.cv.index.sp1]
df <- data.frame(x = x, y = y)
df1 <- data.frame(x = number_of_bins_sp, y = cv.errors.mean.sp3,EQM = cv.errors.mean.sp3)
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
p7.cv <-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM") +
geom_vline(xintercept = number_of_bins_sp[min.cv.index.sp3],color ="red")+
annotate("text",x = number_of_bins_sp[min.cv.index.sp3]+5,y = max(cv.errors.mean.sp3)*0.90,label=paste0("Nº Nós:",par.sp3,"\nEQM:",round(cv.min.sp3,4))) +
axis.theme()
par7 = number_of_bins[min.cv.index.sp3]
df <- data.frame(x = x, y = y)
df1 <- data.frame(x = number_of_bins_sp, y = cv.errors.mean.poly,EQM = cv.errors.mean.poly)
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
p8.cv <-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM") +
geom_vline(xintercept = number_of_bins_sp[min.cv.index.poly],color ="red")+
annotate("text",x = number_of_bins_sp[min.cv.index.poly]+5,y = max(cv.errors.mean.poly)*0.90,label=paste0("Nº Nós:",par.poly,"\nEQM:",round(cv.min.poly,4))) +
axis.theme()
par8 = number_of_bins[min.cv.index.poly]
p8.cv
p8.cv <-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM") +
geom_vline(xintercept = number_of_bins_sp[min.cv.index.poly],color ="red")+
annotate("text",x = number_of_bins_sp[min.cv.index.poly]-5,y = max(cv.errors.mean.poly)*0.90,label=paste0("Nº Nós:",par.poly,"\nEQM:",round(cv.min.poly,4))) +
axis.theme()
p8.cv
partial_plots <- cowplot::plot_grid(p4.cv,p5.cv,p6.cv,p7.cv,p8.cv,ncol=2,nrow =3,labels=LETTERS[1:5])
partial_plots
df <- data.frame(x = x, y = y)
df1 <- data.frame(x = number_of_bins, y = cv.errors.mean.kernel,EQM = cv.errors.mean.kernel)
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
p4.cv <-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM") +
geom_vline(xintercept = par.kernel,color ="red")+
annotate("text",x = number_of_bins[min.cv.index.kernel]+0.05,y = max(cv.errors.mean.kernel)*0.9,label=paste0("Span:",number_of_bins[min.cv.index.kernel],"\nEQM:",round(cv.min.kernel,4))) +
axis.theme()
par4 = number_of_bins[min.cv.index.kernel]
p4.cv
### Kernel (Nadaraya-Watson) LOOCV
df <- data.frame(x = x, y = y)
df1 <- data.frame(x = number_of_bins, y = cv.errors.mean.loess,EQM = cv.errors.mean.loess)
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
p5.cv <-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM") +
geom_vline(xintercept = par.loess,color ="red")+
annotate("text",x = number_of_bins[min.cv.index.loess]+0.05,y = max(cv.errors.mean.loess)*0.9,label=paste0("Span:",number_of_bins[min.cv.index.loess],"\nEQM:",round(cv.min.loess,4))) +
axis.theme()
par5 = number_of_bins[min.cv.index.loess]
p5.cv
df <- data.frame(x = dados$x, y = dados$y)
df1 <- data.frame(x = number_of_bins_sp, y = cv.errors.mean.sp1,EQM = cv.errors.mean.sp1)
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
p6.cv <-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM") +
geom_vline(xintercept = number_of_bins_sp[min.cv.index.sp1],color ="red")+
annotate("text",x = number_of_bins_sp[min.cv.index.sp1]-5,y = max(cv.errors.mean.sp1)*0.8,label=paste0("Nº Nós:",par.sp1,"\nEQM:",round(cv.min.sp1,4))) +
axis.theme()
par6 = number_of_bins[min.cv.index.sp1]
p6.cv
df <- data.frame(x = x, y = y)
df1 <- data.frame(x = number_of_bins_sp, y = cv.errors.mean.sp3,EQM = cv.errors.mean.sp3)
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
p7.cv <-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM") +
geom_vline(xintercept = number_of_bins_sp[min.cv.index.sp3],color ="red")+
annotate("text",x = number_of_bins_sp[min.cv.index.sp3]-5,y = max(cv.errors.mean.sp3)*0.8,label=paste0("Nº Nós:",par.sp3,"\nEQM:",round(cv.min.sp3,4))) +
axis.theme()
par7 = number_of_bins[min.cv.index.sp3]
p7.cv
df <- data.frame(x = x, y = y)
df1 <- data.frame(x = number_of_bins_sp, y = cv.errors.mean.poly,EQM = cv.errors.mean.poly)
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
p8.cv <-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM") +
geom_vline(xintercept = number_of_bins_sp[min.cv.index.poly],color ="red")+
annotate("text",x = number_of_bins_sp[min.cv.index.poly]-5,y = max(cv.errors.mean.poly)*0.8,label=paste0("Nº Nós:",par.poly,"\nEQM:",round(cv.min.poly,4))) +
axis.theme()
par8 = number_of_bins[min.cv.index.poly]
p8.cv
partial_plots <- cowplot::plot_grid(p4.cv,p5.cv,p6.cv,p7.cv,p8.cv,ncol=2,nrow =3,labels=LETTERS[1:5])
partial_plots
library(Metrics)
df_metrics <- data.frame(Smoother = c("Kernel", "Loess","Splines Grau 1","Splines Grau 3","Poly"),
EQM      =  c(
cv.min.kernel,
cv.min.loess,
cv.min.sp1,
cv.min.sp3,
cv.min.poly))
kable_data(data = df_metrics,cap = "\\label{tab:tab_eqm_aplicao1}Erro Quadrático Médio para os suavizadores Loess, Kernel e Spline Cúbico",foot = NULL)
cv.errors.mean.poly
number_of_bins_sp
cv.errors.mean.poly
df <- data.frame(x = x, y = y)
df1 <- data.frame(x = number_of_bins_sp, y = cv.errors.mean.poly,EQM = cv.errors.mean.poly)
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
p8.cv <-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM") +
geom_vline(xintercept = number_of_bins_sp[min.cv.index.poly],color ="red")+
annotate("text",x = number_of_bins_sp[min.cv.index.poly]-5,y = max(cv.errors.mean.poly)*0.8,label=paste0("Nº Nós:",par.poly,"\nEQM:",round(cv.min.poly,4))) +
axis.theme()
p8.cv
fit4 <- loess(y ~ x, degree=1, span = par.loess, data=dados)
# kernel - span = 6
fit5 <-  locfit(y ~ x,deg=1, alpha = par.kernel,kern="gauss", data=dados)
#Spline grau 1
k = par.sp1
p         <-  seq(1,k-1,1)/(k)
knots     <-  quantile(dados$x  , p = p)
fit6       <-  ols(as.formula(glue::glue("y ~ lsp(x, knots)")), data = dados)
# spline cubico
require(splines)
k = par.sp3
p         <-  seq(1,k-1,1)/(k)
knots     <-  quantile(dados$x  , p = p)
fit7 <- lm(y ~ bs(x, knots = knots),data = dados )
k = par.poly
fit8 <- lm(y ~ poly(x,k))
spans = c(par4,par5,par6,par7)
df = cbind(x= dados$x, y = dados$y, Loess = fit4$fitted,Kernel = fitted.values(fit5),`Spline Grau 1`= predict(fit6),`Spline Cubico`= fit7$fitted)
df1 = df %>% as.data.frame
colnames(df) = c("x", "y",
paste0("A4\n", "Loess|Span: ", par.loess),
paste0("A5\n", "Kernel|Width: ", par.kernel),
paste0("A6\n", "Spline Grau 1|Nº Nós: ", par.sp1),
paste0("A7\n", "Spline Grau 3|Nº Nós: ", par.sp3),
paste0("A8\n", "Poly|Nº Nós: ", par.poly))
fit4 <- loess(y ~ x, degree=1, span = par.loess, data=dados)
# kernel - span = 6
fit5 <-  locfit(y ~ x,deg=1, alpha = par.kernel,kern="gauss", data=dados)
#Spline grau 1
k = par.sp1
p         <-  seq(1,k-1,1)/(k)
knots     <-  quantile(dados$x  , p = p)
fit6       <-  ols(as.formula(glue::glue("y ~ lsp(x, knots)")), data = dados)
# spline cubico
require(splines)
k = par.sp3
p         <-  seq(1,k-1,1)/(k)
knots     <-  quantile(dados$x  , p = p)
fit7 <- lm(y ~ bs(x, knots = knots),data = dados )
k = par.poly
fit8 <- lm(y ~ poly(x,k))
spans = c(par4,par5,par6,par7)
df = cbind(x= dados$x, y = dados$y, Loess = fit4$fitted,Kernel = fitted.values(fit5),`Spline Grau 1`= predict(fit6),`Spline Cubico`= fit7$fitted,`Poly`= fit8$fitted)
df1 = df %>% as.data.frame
colnames(df) = c("x", "y",
paste0("A4\n", "Loess|Span: ", par.loess),
paste0("A5\n", "Kernel|Width: ", par.kernel),
paste0("A6\n", "Spline Grau 1|Nº Nós: ", par.sp1),
paste0("A7\n", "Spline Grau 3|Nº Nós: ", par.sp3),
paste0("A8\n", "Poly|Nº Nós: ", par.poly))
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",line.s = 1.05,alpha.o = .99)
fit4 <- loess(y ~ x, degree=1, span = par.loess, data=dados)
# kernel - span = 6
fit5 <-  locfit(y ~ x,deg=1, alpha = par.kernel,kern="gauss", data=dados)
#Spline grau 1
k = par.sp1
p         <-  seq(1,k-1,1)/(k)
knots     <-  quantile(dados$x  , p = p)
fit6       <-  ols(as.formula(glue::glue("y ~ lsp(x, knots)")), data = dados)
# spline cubico
require(splines)
k = par.sp3
p         <-  seq(1,k-1,1)/(k)
knots     <-  quantile(dados$x  , p = p)
fit7 <- lm(y ~ bs(x, knots = knots),data = dados )
k = par.poly
fit8 <- lm(y ~ poly(x,1))
spans = c(par4,par5,par6,par7)
df = cbind(x= dados$x, y = dados$y, Loess = fit4$fitted,Kernel = fitted.values(fit5),`Spline Grau 1`= predict(fit6),`Spline Cubico`= fit7$fitted,`Poly`= fit8$fitted)
df1 = df %>% as.data.frame
colnames(df) = c("x", "y",
paste0("A4\n", "Loess|Span: ", par.loess),
paste0("A5\n", "Kernel|Width: ", par.kernel),
paste0("A6\n", "Spline Grau 1|Nº Nós: ", par.sp1),
paste0("A7\n", "Spline Grau 3|Nº Nós: ", par.sp3),
paste0("A8\n", "Poly|Nº Nós: ", par.poly))
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",line.s = 1.05,alpha.o = .99)
fit4 <- loess(y ~ x, degree=1, span = par.loess, data=dados)
# kernel - span = 6
fit5 <-  locfit(y ~ x,deg=1, alpha = par.kernel,kern="gauss", data=dados)
#Spline grau 1
k = par.sp1
p         <-  seq(1,k-1,1)/(k)
knots     <-  quantile(dados$x  , p = p)
fit6       <-  ols(as.formula(glue::glue("y ~ lsp(x, knots)")), data = dados)
# spline cubico
require(splines)
k = par.sp3
p         <-  seq(1,k-1,1)/(k)
knots     <-  quantile(dados$x  , p = p)
fit7 <- lm(y ~ bs(x, knots = knots),data = dados )
k = par.poly
fit8 <- lm(y ~ poly(x,2))
spans = c(par4,par5,par6,par7)
df = cbind(x= dados$x, y = dados$y, Loess = fit4$fitted,Kernel = fitted.values(fit5),`Spline Grau 1`= predict(fit6),`Spline Cubico`= fit7$fitted,`Poly`= fit8$fitted)
df1 = df %>% as.data.frame
colnames(df) = c("x", "y",
paste0("A4\n", "Loess|Span: ", par.loess),
paste0("A5\n", "Kernel|Width: ", par.kernel),
paste0("A6\n", "Spline Grau 1|Nº Nós: ", par.sp1),
paste0("A7\n", "Spline Grau 3|Nº Nós: ", par.sp3),
paste0("A8\n", "Poly|Nº Nós: ", par.poly))
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",line.s = 1.05,alpha.o = .99)
cv.errors.mean.poly
cv.min.poly
par.poly
cv.errors.mean.poly
plot(number_of_bins_sp,cv.errors.mean.poly)
plot(number_of_bins_sp[1:19],cv.errors.mean.poly[1:19])
df <- data.frame(x = x, y = y)
df1 <- data.frame(x = number_of_bins_sp, y = cv.errors.mean.poly,EQM = cv.errors.mean.poly)
df <- data.frame(x = x, y = y)
df1 <- data.frame(x = number_of_bins_sp, y = cv.errors.mean.poly,EQM = cv.errors.mean.poly)
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1[1:19,]) %>%
gather(key = "variable", value = "value",-x,-y)
p8.cv <-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM") +
geom_vline(xintercept = number_of_bins_sp[min.cv.index.poly],color ="red")+
annotate("text",x = number_of_bins_sp[min.cv.index.poly]-5,y = max(cv.errors.mean.poly)*0.8,label=paste0("Nº Nós:",par.poly,"\nEQM:",round(cv.min.poly,4))) +
axis.theme()
par8 = number_of_bins[min.cv.index.poly]
p8.cv
df <- data.frame(x = x, y = y)
df1 <- data.frame(x = number_of_bins_sp, y = cv.errors.mean.poly,EQM = cv.errors.mean.poly)
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1[1:19,]) %>%
gather(key = "variable", value = "value",-x,-y)
df <- data.frame(x = x, y = y)
df1 <- data.frame(x = number_of_bins_sp[1:19], y = cv.errors.mean.poly[1:19],EQM = cv.errors.mean.poly[1:19])
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
p8.cv <-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM") +
geom_vline(xintercept = number_of_bins_sp[min.cv.index.poly],color ="red")+
annotate("text",x = number_of_bins_sp[min.cv.index.poly]-5,y = max(cv.errors.mean.poly)*0.8,label=paste0("Nº Nós:",par.poly,"\nEQM:",round(cv.min.poly,4))) +
axis.theme()
par8 = number_of_bins[min.cv.index.poly]
p8.cv
df <- data.frame(x = x, y = y)
df1 <- data.frame(x = number_of_bins_sp[1:19], y = cv.errors.mean.poly[1:19],EQM = cv.errors.mean.poly[1:19])
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
p8.cv <-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM") +
geom_vline(xintercept = number_of_bins_sp[min.cv.index.poly],color ="red")+
annotate("text",x = number_of_bins_sp[min.cv.index.poly]-5,y = max(df1$y)*0.8,label=paste0("Nº Nós:",par.poly,"\nEQM:",round(cv.min.poly,4))) +
axis.theme()
par8 = number_of_bins[min.cv.index.poly]
p8.cv
df_comp
dados1 <- read.csv(file = "dados_sim/dados_sim_1_3.csv",header = TRUE)
dados2 <- read.csv(file = "dados_sim/dados_sim_4_5.csv",header = TRUE)
dados3 <- read.csv(file = "dados_sim/dados_sim_6_7.csv",header = TRUE)
dados4 <- read.csv(file = "dados_sim/dados_sim_8_9.csv",header = TRUE)
dados_final <- rbind(dados1,dados2,dados3,dados4)
dados_final$Tipo <- paste0(dados_final$n,dados_final$var)
dados_final$EQM_MIN <- apply(X = dados_final[,1:4],MARGIN = 1,FUN = which.min)
write.csv(x = dados_final,file = "dados_sim_final.csv",row.names = FALSE)
table_comp <- tapply(X = dados_final$EQM_MIN,INDEX = dados_final$Tipo,FUN = table)
table_mt <- matrix(data = 0,nrow = 9,ncol = 4)
df_comp  <- as.data.frame(table_mt)
colnames(df_comp) <- c(1,2,3,4)
table_comp$`1500.05`
for(i in 1:9){
ind = colnames(df_comp)%in% names(table_comp[[i]])
pos = which(ind)
df_comp[i,pos] <- table_comp[[i]]
}
df_comp
dados1 <- read.csv(file = "dados_sim_cen1//dados_sim_1_3.csv",header = TRUE)
dados2 <- read.csv(file = "dados_sim_cen1/dados_sim_4_5.csv",header = TRUE)
dados3 <- read.csv(file = "dados_sim_cen1/dados_sim_6_7.csv",header = TRUE)
dados4 <- read.csv(file = "dados_sim_cen1/dados_sim_8_9.csv",header = TRUE)
dados_final <- rbind(dados1,dados2,dados3,dados4)
dados_final$Tipo <- paste0(dados_final$n,dados_final$var)
dados_final$EQM_MIN <- apply(X = dados_final[,1:4],MARGIN = 1,FUN = which.min)
write.csv(x = dados_final,file = "dados_sim_final_cen1.csv",row.names = FALSE)
table_comp <- tapply(X = dados_final$EQM_MIN,INDEX = dados_final$Tipo,FUN = table)
table_mt <- matrix(data = 0,nrow = 9,ncol = 4)
df_comp  <- as.data.frame(table_mt)
colnames(df_comp) <- c(1,2,3,4)
table_comp$`1500.05`
for(i in 1:9){
ind = colnames(df_comp)%in% names(table_comp[[i]])
pos = which(ind)
df_comp[i,pos] <- table_comp[[i]]
}
df_comp
