#Spline grau 1
k = par.sp1
p         <-  seq(1,k-1,1)/(k)
knots     <-  quantile(dados$x  , p = p)
fit6       <-  ols(as.formula(glue::glue("y ~ lsp(x, knots)")), data = dados)
# spline cubico
require(splines)
k = par.sp3
p         <-  seq(1,k-1,1)/(k)
knots     <-  quantile(dados$x  , p = p)
fit7 <- lm(y ~ bs(x, knots = knots),data = dados )
fit8 <- lm(y ~ poly(x = x,degree = 3),data = dados)
spans = c(par4,par5,par6,par7)
df = cbind(x= dados$x, y = dados$y,Kernel = fitted.values(fit5), Loess = fit4$fitted,`Spline Grau 1`= predict(fit6),`Spline Cubico`= fit7$fitted,`Pol. Cúbico` = fit8$fitted.values)
df1 = df %>% as.data.frame
colnames(df) = c("x", "y",
paste0("A1 ", "Kernel|Width: ", par.kernel),
paste0("A2 ", "Loess|Span: ", par.loess),
paste0("A3 ", "Spline Grau 1|Nº Nós: ", par.sp1),
paste0("A4 ", "Spline Grau 3|Nº Nós: ", par.sp3),
paste0("A5 ", "Polinómio Cúbico"))
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
library(Metrics)
df_metrics <- data.frame(Smoother = c("Kernel", "Loess","Splines Grau 1","Splines Grau 3"),
`Parâm. Suavizador` = c(par.kernel,par.loess,par.sp1,par.sp3),
EQM      =  c( round(cv.min.kernel,4),round(cv.min.loess,4),round(cv.min.sp1,4),round(cv.min.sp3,4))
)
colnames(df_metrics) <- c("Suavizador","Parâm. Suavizador","EQM")
kable_data(data = df_metrics,cap = "\\label{tab:tab_eqm_aplicacao1}Erro Quadrático Médio para os suavizadores Loess, Kernel e Spline Cúbico",foot = NULL)
library(Metrics)
df_metrics <- data.frame(Smoother = c("Kernel", "Loess","Splines Grau 1","Splines Grau 3"),
`Parâm. Suavizador` = c(par.kernel,par.loess,par.sp1,par.sp3),
EQM      =  c( round(cv.min.kernel,4),round(cv.min.loess,4),round(cv.min.sp1,4),round(cv.min.sp3,4))
)
colnames(df_metrics) <- c("Suavizador","Parâm. Suavizador","EQM")
kable_data(data = df_metrics,cap = "\\label{tab:tab_eqm_aplicacao1} Erro Quadrático Médio ($EQM_{loocv}$) para os suavizadores Loess, Kernel e Splines de Regressão Linear e Cúbico (Aplicação 1). ",foot = NULL,c_names = c("Suavizador","Parâm. Suavizador","$EQM_{loocv}$"))
plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",line.s = 1.05,alpha.o = .99)
#library(tidyverse)
dados = data.frame(x,y)
true = fit4$fitted
df = cbind(dados$x, dados$y, true) %>% as.data.frame
colnames(df) = c("x", "y","Curva real")
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
p1 <- plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",legend.pos = "none")
true = fitted(fit5)
df = cbind(dados$x, dados$y, true) %>% as.data.frame
colnames(df) = c("x", "y","Curva real")
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
p2 <- plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",legend.pos = "none")
true = fit6$fitted.values
df = cbind(dados$x, dados$y, true) %>% as.data.frame
colnames(df) = c("x", "y","Curva real")
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
p3 <- plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",legend.pos = "none")
true = fit7$fitted.values
df = cbind(dados$x, dados$y, true) %>% as.data.frame
colnames(df) = c("x", "y","Curva real")
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
p4 <- plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",legend.pos = "none")
true = fit8$fitted.values
df = cbind(dados$x, dados$y, true) %>% as.data.frame
colnames(df) = c("x", "y","Curva real")
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
p5 <- plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",legend.pos = "none")
pcol    <- cowplot::plot_grid(p1,p2,p3,p4,p5, align = "hv",ncol = 2, nrow = 3,labels = LETTERS[1:6])
#p_fim   <- cowplot::plot_grid(pcol,legend_,rel_widths = c(3,0.5))
pcol
library(Metrics)
df_metrics <- data.frame(Smoother = c("Kernel", "Loess","Splines Grau 1","Splines Grau 3"),
`Parâm. Suavizador` = c(par.kernel,par.loess,round(par.sp1,0),round(par.sp3,0)),
EQM      =  c( round(cv.min.kernel,4),round(cv.min.loess,4),round(cv.min.sp1,4),round(cv.min.sp3,4))
)
colnames(df_metrics) <- c("Suavizador","Parâm. Suavizador","EQM")
kable_data(data = df_metrics,cap = "\\label{tab:tab_eqm_aplicacao1} Erro Quadrático Médio ($EQM_{loocv}$) para os suavizadores Loess, Kernel e Splines de Regressão Linear e Cúbico (Aplicação 1). ",foot = NULL,c_names = c("Suavizador","Parâm. Suavizador","$EQM_{loocv}$"))
round(par.sp1,0)
library(Metrics)
df_metrics <- data.frame(Smoother = c("Kernel", "Loess","Splines Grau 1","Splines Grau 3"),
`Parâm. Suavizador` = c(par.kernel,par.loess,round(par.sp1,0),round(par.sp3,0)),
EQM      =  c( round(cv.min.kernel,4),round(cv.min.loess,4),round(cv.min.sp1,4),round(cv.min.sp3,4))
)
colnames(df_metrics) <- c("Suavizador","Parâm. Suavizador","EQM")
kable_data(data = df_metrics,cap = "\\label{tab:tab_eqm_aplicacao1} Erro Quadrático Médio ($EQM_{loocv}$) para os suavizadores Loess, Kernel e Splines de Regressão Linear e Cúbico (Aplicação 1). ",foot = NULL,c_names = c("Suavizador","Parâm. Suavizador","$EQM_{loocv}$"))
library(Metrics)
df_metrics <- data.frame(Smoother = c("Kernel", "Loess","Splines Grau 1","Splines Grau 3"),
`Parâm. Suavizador` = c(par.kernel,par.loess,as.integer(round(par.sp1,0)),as.integer(round(par.sp3,0))),
EQM      =  c( round(cv.min.kernel,4),round(cv.min.loess,4),round(cv.min.sp1,4),round(cv.min.sp3,4))
)
colnames(df_metrics) <- c("Suavizador","Parâm. Suavizador","EQM")
kable_data(data = df_metrics,cap = "\\label{tab:tab_eqm_aplicacao1} Erro Quadrático Médio ($EQM_{loocv}$) para os suavizadores Loess, Kernel e Splines de Regressão Linear e Cúbico (Aplicação 1). ",foot = NULL,c_names = c("Suavizador","Parâm. Suavizador","$EQM_{loocv}$"))
#library(tidyverse)
dados = data.frame(x,y)
true = fit4$fitted
df = cbind(dados$x, dados$y, true) %>% as.data.frame
colnames(df) = c("x", "y","Curva real")
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
p1 <- plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",legend.pos = "none")
true = fitted(fit5)
df = cbind(dados$x, dados$y, true) %>% as.data.frame
colnames(df) = c("x", "y","Curva real")
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
p2 <- plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",legend.pos = "none")
true = fit6$fitted.values
df = cbind(dados$x, dados$y, true) %>% as.data.frame
colnames(df) = c("x", "y","Curva real")
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
p3 <- plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",legend.pos = "none")
true = fit7$fitted.values
df = cbind(dados$x, dados$y, true) %>% as.data.frame
colnames(df) = c("x", "y","Curva real")
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
p4 <- plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",legend.pos = "none")
true = fit8$fitted.values
df = cbind(dados$x, dados$y, true) %>% as.data.frame
colnames(df) = c("x", "y","Curva real")
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
p5 <- plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",legend.pos = "none")
pcol    <- cowplot::plot_grid(p1,p2,p3,p4,p5, align = "hv",ncol = 2, nrow = 3,labels = LETTERS[1:6])
#p_fim   <- cowplot::plot_grid(pcol,legend_,rel_widths = c(3,0.5))
pcol
library(Metrics)
df_metrics <- data.frame(Smoother = c("Kernel", "Loess","Splines Grau 1","Splines Grau 3","Polinômio Cúbico"),
`Parâm. Suavizador` = c(par.kernel,par.loess,par.sp1,par.sp3,""),
EQM      =  c( round(rse(df$y,fitted.values(fit4)),6),
round(rse(df$y,fitted.values(fit5)),6),
round(rse(df$y,fitted.values(fit6)),6),
round(rse(df$y,fitted.values(fit7)),6),
round(rse(df$y,fitted.values(fit8)),6))
)
colnames(df_metrics) <- c("Suavizador","Parâm. Suavizador","EQM")
kable_data(data = df_metrics,cap = "\\label{tab:tab_eqm_aplicacao1_geral}Erro Quadrático Médio para os suavizadores Loess, Kernel e Spline Cúbico",foot = NULL)
library(Metrics)
df_metrics <- data.frame(Smoother = c("Kernel", "Loess","Splines Grau 1","Splines Grau 3","Polinômio Cúbico"),
`Parâm. Suavizador` = c(par.kernel,par.loess,par.sp1,par.sp3,""),
EQM      =  c( round(rse(df$y,fitted.values(fit4)),6),
round(rse(df$y,fitted.values(fit5)),6),
round(rse(df$y,fitted.values(fit6)),6),
round(rse(df$y,fitted.values(fit7)),6),
round(rse(df$y,fitted.values(fit8)),6))
)
colnames(df_metrics) <- c("Suavizador","Parâm. Suavizador","EQM")
kable_data(data = df_metrics,cap = "\\label{tab:tab_eqm_aplicacao1_geral} Erro Quadrático Médio ($EQM_c$) para os suavizadores Loess, Kernel e Splines de Regressão Linear e Cúbico.",foot = NULL,c("Suavizador","Parâm. Suavizador","$EQM_c$"))
df_metrics <- data.frame(Smoother = c("Kernel", "Loess","Splines Grau 1","Splines Grau 3","Polinômio Cúbico"),
`Parâm. Suavizador` = c(par.kernel,par.loess,par.sp1,par.sp3,""),
EQM      =  c( round(rse(df$y,fitted.values(fit4)),6),
round(rse(df$y,fitted.values(fit5)),6),
round(rse(df$y,fitted.values(fit6)),6),
round(rse(df$y,fitted.values(fit7)),6),
round(rse(df$y,fitted.values(fit8)),6))
)
df_metrics
library(Metrics)
df_metrics <- data.frame(Smoother = c("Kernel", "Loess","Splines Grau 1","Splines Grau 3","Polinômio Cúbico"),
`Parâm. Suavizador` = c(par.kernel,par.loess,par.sp1,par.sp3,""),
EQM      =  c( round(rse(df$y,fitted.values(fit4)),6),
round(rse(df$y,fitted.values(fit5)),6),
round(rse(df$y,fitted.values(fit6)),6),
round(rse(df$y,fitted.values(fit7)),6),
round(rse(df$y,fitted.values(fit8)),6))
)
colnames(df_metrics) <- c("Suavizador","Parâm. Suavizador","EQM")
kable_data(data = df_metrics,cap = "\\label{tab:tab_eqm_aplicacao1_geral} Erro Quadrático Médio ($EQM_c$) para os suavizadores Loess, Kernel e Splines de Regressão Linear e Cúbico.",foot = NULL,c_names = c("Suavizador","Parâm. Suavizador","$EQM_c$"))
data("Boston")
source(file = "funcoes.R",encoding = "UTF-8")
library(locfit)
library(splines)
library(segmented)
library(rms)
library(pacman)
library(igraph)
library(zoo)
data("Boston")
x1            <- Boston$lstat
y             <- Boston$medv
dados         <- data.frame(x = x1,  y = y)
x = dados$x
y = dados$y
#plot.curves(x = x1,y = y)
plot.curves(x = dados$x,y = dados$y,labelx = "Temperatura (ºKelvin)",labely = "Coeficiente de Exp. Térmica",title = NULL)
#plot.curves(x = x3,y = y)
x1            <- Boston$dis
y             <- Boston$medv
dados         <- data.frame(x = x1,  y = y)
x = dados$x
y = dados$y
#plot.curves(x = x1,y = y)
plot.curves(x = dados$x,y = dados$y,labelx = "X",labely = "Preço Mediano de Casas",title = NULL)
#plot.curves(x = x3,y = y)
source(file = "funcoes.R",encoding = "UTF-8")
library(locfit)
library(splines)
library(segmented)
library(rms)
library(pacman)
library(igraph)
library(zoo)
data("Boston")
x1            <- Boston$lstat
y             <- Boston$medv
dados         <- data.frame(x = x1,  y = y)
x = dados$x
y = dados$y
#plot.curves(x = x1,y = y)
plot.curves(x = dados$x,y = dados$y,labelx = "X",labely = "Preço Mediano de Casas",title = NULL)
#plot.curves(x = x3,y = y)
rm(list=ls())
source(file = "funcoes.R",encoding = "UTF-8")
library(tidyverse)
library(binsmooth)
library(knitr)
library(kableExtra)
library(additive.models)
library(rms)
library(locfit)
knitr::opts_chunk$set(echo = FALSE,warning= FALSE, message= FALSE,
out.width = "100%",fig.align = "center",size ="large",fig.height = 2.5)
dados_final <- read.csv("dados_sim_final_cen1_2.csv",header = TRUE)
# dados_final$var <- ifelse( (dados_final$var == 2 & dados_final$n == 300) ,1,dados_final$var)
# dados_final$var <- ifelse( (dados_final$var == 3 & dados_final$n == 300) ,2,dados_final$var)
table_comp <- tapply(X = dados_final$EQM_MIN2,INDEX = dados_final$Tipo,FUN = table)
table_mt <- matrix(data = 0,nrow = 9,ncol = 5)
df_comp  <- as.data.frame(table_mt)
colnames(df_comp) <- c(1,2,3,4,5)
for(i in 1:9){
ind = colnames(df_comp)%in% names(table_comp[[i]])
pos = which(ind)
df_comp[i,pos] <- table_comp[[i]]
}
df_comp_prop <- df_comp %>% mutate(Kernel = paste0(format(round(((`1`)/1000)*100,2),decimal.mark = ","),"%"),
Loess = paste0(format(round(((`2` )/1000)*100,2),decimal.mark = ","),"%"),
`Sp. Reg. 1` = paste0(format(round(((`3` )/1000)*100,2),decimal.mark = ","),"%"),
`Sp. Reg. 3` = paste0(format(round(((`4` )/1000)*100,2),decimal.mark = ","),"%"))
df_leg <- data.frame(
`Sub-Cenário` = c(1:9),
Tamanho = c(150,150,150,250,250,250,350,350,350),
`Desvio Padrão` = c(0.5,1,2,0.5,1,2,0.5,1,2))
df_comp_prop <- cbind(df_leg,df_comp_prop)
df_tb <- df_comp_prop[,c(1,2,3,9,10,11,12)]
c_names = c("Sub-Cenário","Tamanho","Desvio Padrão", "Kernel","Loess","Sp. Reg. Linear","Sp. Reg. Cúbico")
colnames(df_tb) <- c_names
kable_data(data = df_tb ,cap = "\\label{tab:tab_simulacao_namostras_cenario1_2} Percentual do Erro quadrático médio $EQM_{loocv}$ mínimo, considerando os ajustes provenientes dos melhores parâmetros obtidos por meio de aplicação do Procedimento 1, para cada suavizador em 1000 amostras.",foot = NULL,c_names = c_names) %>%
kable_styling(latex_options = "scale_down")
# dados_boxplot <- dados_final %>% dplyr::select(X1,X2,X3,X4,X5,n,var) %>%
#   gather(key = "variable", value = "value", -n, -var )
#
# dados_boxplot$n <- as.factor(dados_boxplot$n)
# dados_boxplot$var <- as.factor(dados_boxplot$var)
# dados_boxplot$variable <- factor(dados_boxplot$variable,levels = c("X1","X2","X3","X4","X5"),labels = c("Kernel","Loess","Sp. Reg. 1","Sp. Reg. 3","Pol. Cúbico"))
# colnames(dados_boxplot) <- c("Tam. Amostra","Desvio Padrão","Legenda","EQM")
dados_boxplot <- dados_final %>% dplyr::select(X1,X2,X3,X4,n,var) %>%
gather(key = "variable", value = "value", -n, -var )
dados_boxplot$n <- as.factor(dados_boxplot$n)
dados_boxplot$var <- as.factor(dados_boxplot$var)
dados_boxplot$variable <- factor(dados_boxplot$variable,levels = c("X1","X2","X3","X4"),labels = c("Kernel","Loess","Sp. Reg. Linear","Sp. Reg. Cúbico"))
colnames(dados_boxplot) <- c("Tam. Amostra","Desvio Padrão","Legenda","EQM")
plot1 <- ggplot(data = as.data.frame(dados_boxplot),aes(x=`Desvio Padrão`, y=EQM,color = Legenda))+
geom_boxplot(outlier.colour="black",alpha=0.8, outlier.shape=16,outlier.size=2, notch=FALSE)+
axis.theme(x.angle = 45,vjust = 1,hjust = 1,lengend_text_size = 6,lengend_title_size = 6)
plot2 <- as.data.frame(dados_boxplot) %>% filter(`Desvio Padrão` == "0.5") %>% ggplot(aes(x=`Tam. Amostra`, y=EQM,color = Legenda))+
labs(x = NULL,title = NULL) +
geom_boxplot(outlier.colour="black",alpha=0.8, outlier.shape=16,outlier.size=2, notch=FALSE)+
axis.theme(x.angle = 0,lengend_text_size = 8,lengend_title_size = 6,leg = FALSE,pos_leg = "none")
#plot2 %>% group_by(`Tam. Amostra`) %>% summarise(t=n())#
plot3 <- as.data.frame(dados_boxplot) %>% filter(`Desvio Padrão` == "1") %>% ggplot(aes(x=`Tam. Amostra`, y=EQM,color = Legenda))+
labs(x = NULL,title = NULL) +
geom_boxplot(outlier.colour="black",alpha=0.8, outlier.shape=16,outlier.size=2, notch=FALSE)+
axis.theme(x.angle = 0,lengend_text_size = 7,lengend_title_size = 6,leg_angle = 45,leg = FALSE,pos_leg = "none")
plot4 <- as.data.frame(dados_boxp.lot) %>% filter(`Desvio Padrão` == "2") %>% ggplot(aes(x=`Tam. Amostra`, y=EQM,color = Legenda))+
geom_boxplot(outlier.colour="black",alpha=0.8, outlier.shape=16,outlier.size=2, notch=FALSE)+
axis.theme(x.angle = 0,lengend_text_size = 7,lengend_title_size = 6,leg_angle = 45,leg = FALSE,pos_leg = "none")
plot4 <- as.data.frame(dados_boxplot) %>% filter(`Desvio Padrão` == "2") %>% ggplot(aes(x=`Tam. Amostra`, y=EQM,color = Legenda))+
geom_boxplot(outlier.colour="black",alpha=0.8, outlier.shape=16,outlier.size=2, notch=FALSE)+
axis.theme(x.angle = 0,lengend_text_size = 7,lengend_title_size = 6,leg_angle = 45,leg = FALSE,pos_leg = "none")
#library(tidyverse)
library(dslabs)
library(zoo)
library(igraph)
library(ggplot2)
library(dplyr)
library(tidyr)
library(wesanderson)
library(RColorBrewer)
###### DADOS  ########
set.seed(102585)
tam = 350
normal = rnorm(tam,sd = 2)
x = seq(0, 50, length.out = tam)
y = 10 + (5*sin(pi*x/24)) + normal
dados = data.frame(x,y)
## plotando a curva real
true = 10 + (5*sin(pi*x/24))
df = cbind(dados$x, dados$y, true) %>% as.data.frame
colnames(df) = c("x", "y","Curva real")
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
p3 <- plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",legend.pos = "none")
legend_ <- cowplot::get_legend(p1 + axis.theme(pos_leg = "right"))
#library(tidyverse)
library(dslabs)
library(zoo)
library(igraph)
library(ggplot2)
library(dplyr)
library(tidyr)
library(wesanderson)
library(RColorBrewer)
###### DADOS  ########
set.seed(102585)
tam = 350
normal = rnorm(tam,sd = 2)
x = seq(0, 50, length.out = tam)
y = 10 + (5*sin(pi*x/24)) + normal
dados = data.frame(x,y)
## plotando a curva real
true = 10 + (5*sin(pi*x/24))
df = cbind(dados$x, dados$y, true) %>% as.data.frame
colnames(df) = c("x", "y","Curva real")
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
p3 <- plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",legend.pos = "none")
legend_ <- cowplot::get_legend(p3 + axis.theme(pos_leg = "right"))
prow <- cowplot::plot_grid(p1,p2,p3, ncol = 3 , nrow = 1, labels = LETTERS[1:3])
#library(tidyverse)
library(dslabs)
library(zoo)
library(igraph)
library(ggplot2)
library(dplyr)
library(tidyr)
library(wesanderson)
library(RColorBrewer)
###### DADOS  ########
set.seed(102585)
tam = 350
normal = rnorm(tam,sd = 0.5)
x = seq(0, 50, length.out = tam)
y = 10 + (5*sin(pi*x/24)) + normal
dados = data.frame(x,y)
## plotando a curva real
true = 10 + (5*sin(pi*x/24))
df = cbind(dados$x, dados$y, true) %>% as.data.frame
colnames(df) = c("x", "y","Curva real")
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
p1 <- plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",legend.pos = "none")
#library(tidyverse)
library(dslabs)
library(zoo)
library(igraph)
library(ggplot2)
library(dplyr)
library(tidyr)
library(wesanderson)
library(RColorBrewer)
###### DADOS  ########
set.seed(102585)
tam = 350
normal = rnorm(tam,sd = 1)
x = seq(0, 50, length.out = tam)
y = 10 + (5*sin(pi*x/24)) + normal
dados = data.frame(x,y)
## plotando a curva real
true = 10 + (5*sin(pi*x/24))
df = cbind(dados$x, dados$y, true) %>% as.data.frame
colnames(df) = c("x", "y","Curva real")
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
p2 <- plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",legend.pos = "none")
#library(tidyverse)
library(dslabs)
library(zoo)
library(igraph)
library(ggplot2)
library(dplyr)
library(tidyr)
library(wesanderson)
library(RColorBrewer)
###### DADOS  ########
set.seed(102585)
tam = 350
normal = rnorm(tam,sd = 2)
x = seq(0, 50, length.out = tam)
y = 10 + (5*sin(pi*x/24)) + normal
dados = data.frame(x,y)
## plotando a curva real
true = 10 + (5*sin(pi*x/24))
df = cbind(dados$x, dados$y, true) %>% as.data.frame
colnames(df) = c("x", "y","Curva real")
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
p3 <- plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",legend.pos = "none")
legend_ <- cowplot::get_legend(p3 + axis.theme(pos_leg = "right"))
prow <- cowplot::plot_grid(p1,p2,p3, ncol = 3 , nrow = 1, labels = LETTERS[1:3])
#parcial <- cowplot::plot_grid(legend_,prow,ncol = 1,nrow = 2,rel_heights = c(0.7,2))
parcial <- cowplot::plot_grid(prow,legend_ncol = 2,nrow = 1,rel_widths = c(3,0.4))
parcial
# legend_ <- cowplot::get_legend(
#
#   p1 + axis.theme(pos_leg = "right")
#
# )
#
# #parcial1<- cowplot::plot_grid(plot1,labels = LETTERS[1])
#
# # parcial2 <- cowplot::plot_grid(plot2,ncol = 1, nrow = 1,labels = LETTERS[1])
# # parcial3 <- cowplot::plot_grid(plot3,plot4,ncol = 2, nrow = 1,labels = LETTERS[2:3])
# pcol    <- cowplot::plot_grid(plot2,plot3,plot4,align = "hv",ncol = 1, nrow = 3,labels = LETTERS[1:3])
# p_fim   <- cowplot::plot_grid(pcol,legend_,rel_widths = c(3,0.7))
ggsave(filename = "cenario1_sim.png",plot = parcial)
legend_ <- cowplot::get_legend(p1 + axis.theme(pos_leg = "right"))
legend_ <- cowplot::get_legend(p1 + axis.theme(pos_leg = "right"))
prow <- cowplot::plot_grid(p1,p2,p3, ncol = 3 , nrow = 1, labels = LETTERS[1:3])
#parcial <- cowplot::plot_grid(legend_,prow,ncol = 1,nrow = 2,rel_heights = c(0.7,2))
parcial <- cowplot::plot_grid(prow,legend_ncol = 2,nrow = 1,rel_widths = c(3,0.4))
#parcial <- cowplot::plot_grid(legend_,prow,ncol = 1,nrow = 2,rel_heights = c(0.7,2))
parcial <- cowplot::plot_grid(prow,legend_ncol = 2,nrow = 1,rel_widths = c(3,0.4))
parcial
#library(tidyverse)
library(dslabs)
library(zoo)
library(igraph)
library(ggplot2)
library(dplyr)
library(tidyr)
library(wesanderson)
library(RColorBrewer)
###### DADOS  ########
set.seed(102585)
tam = 350
normal = rnorm(tam,sd = 2)
x = seq(0, 50, length.out = tam)
y = 10 + (5*sin(pi*x/24)) + normal
dados = data.frame(x,y)
## plotando a curva real
true = 10 + (5*sin(pi*x/24))
df = cbind(dados$x, dados$y, true) %>% as.data.frame
colnames(df) = c("x", "y","Curva real")
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
p3 <- plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",legend.pos = "none")
legend_ <- cowplot::get_legend(p1 + axis.theme(pos_leg = "right"))
prow <- cowplot::plot_grid(p1,p2,p3, ncol = 3 , nrow = 1, labels = LETTERS[1:3])
#parcial <- cowplot::plot_grid(legend_,prow,ncol = 1,nrow = 2,rel_heights = c(0.7,2))
parcial <- cowplot::plot_grid(prow,legend_ncol = 2,nrow = 1,rel_widths = c(3,0.4))
parcial
# legend_ <- cowplot::get_legend(
#
#   p1 + axis.theme(pos_leg = "right")
#
# )
#
# #parcial1<- cowplot::plot_grid(plot1,labels = LETTERS[1])
#
# # parcial2 <- cowplot::plot_grid(plot2,ncol = 1, nrow = 1,labels = LETTERS[1])
# # parcial3 <- cowplot::plot_grid(plot3,plot4,ncol = 2, nrow = 1,labels = LETTERS[2:3])
# pcol    <- cowplot::plot_grid(plot2,plot3,plot4,align = "hv",ncol = 1, nrow = 3,labels = LETTERS[1:3])
# p_fim   <- cowplot::plot_grid(pcol,legend_,rel_widths = c(3,0.7))
ggsave(filename = "cenario1_sim.png",plot = parcial)
#parcial <- cowplot::plot_grid(legend_,prow,ncol = 1,nrow = 2,rel_heights = c(0.7,2))
parcial <- cowplot::plot_grid(prow,legend_, ncol= 2,nrow = 1,rel_widths = c(3,0.4))
parcial
#library(tidyverse)
library(dslabs)
library(zoo)
library(igraph)
library(ggplot2)
library(dplyr)
library(tidyr)
library(wesanderson)
library(RColorBrewer)
###### DADOS  ########
set.seed(102585)
tam = 350
normal = rnorm(tam,sd = 2)
x = seq(0, 50, length.out = tam)
y = 10 + (5*sin(pi*x/24)) + normal
dados = data.frame(x,y)
## plotando a curva real
true = 10 + (5*sin(pi*x/24))
df = cbind(dados$x, dados$y, true) %>% as.data.frame
colnames(df) = c("x", "y","Curva real")
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
p3 <- plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",legend.pos = "none")
legend_ <- cowplot::get_legend(p1 + axis.theme(pos_leg = "right"))
prow <- cowplot::plot_grid(p1,p2,p3, ncol = 3 , nrow = 1, labels = LETTERS[1:3])
#parcial <- cowplot::plot_grid(legend_,prow,ncol = 1,nrow = 2,rel_heights = c(0.7,2))
parcial <- cowplot::plot_grid(prow,legend_, ncol= 2,nrow = 1,rel_widths = c(3,0.4))
parcial
# legend_ <- cowplot::get_legend(
#
#   p1 + axis.theme(pos_leg = "right")
#
# )
#
# #parcial1<- cowplot::plot_grid(plot1,labels = LETTERS[1])
#
# # parcial2 <- cowplot::plot_grid(plot2,ncol = 1, nrow = 1,labels = LETTERS[1])
# # parcial3 <- cowplot::plot_grid(plot3,plot4,ncol = 2, nrow = 1,labels = LETTERS[2:3])
# pcol    <- cowplot::plot_grid(plot2,plot3,plot4,align = "hv",ncol = 1, nrow = 3,labels = LETTERS[1:3])
# p_fim   <- cowplot::plot_grid(pcol,legend_,rel_widths = c(3,0.7))
ggsave(filename = "cenario1_sim.png",plot = parcial)
