stat_smooth(method = mult[[4]]$type,se = se,size=size, alpha=alpha,span = mult[[4]]$span, aes(x = x,y = y,color = n_colors1[4]))
}else if(l <= 5){
plot <- plot +
stat_smooth(method = mult[[1]]$type,se = se,size=size, alpha=alpha,span = mult[[1]]$span, aes(x = x,y = y,color = n_colors1[1]))+
stat_smooth(method = mult[[2]]$type,se = se,size=size, alpha=alpha,span = mult[[2]]$span, aes(x = x,y = y,color = n_colors1[2]))+
stat_smooth(method = mult[[3]]$type,se = se,size=size, alpha=alpha,span = mult[[3]]$span, aes(x = x,y = y,color = n_colors1[3]))+
stat_smooth(method = mult[[4]]$type,se = se,size=size, alpha=alpha,span = mult[[4]]$span, aes(x = x,y = y,color = n_colors1[4]))+
stat_smooth(method = mult[[5]]$type,se = se,size=size, alpha=alpha,span = mult[[5]]$span, aes(x = x,y = y,color = n_colors1[5]))
}else if(l <= 6){
plot <- plot +
stat_smooth(method = mult[[1]]$type,se = se,size=size, alpha=alpha,span = mult[[1]]$span, aes(x = x,y = y,color = n_colors1[1]))+
stat_smooth(method = mult[[2]]$type,se = se,size=size, alpha=alpha,span = mult[[2]]$span, aes(x = x,y = y,color = n_colors1[2]))+
stat_smooth(method = mult[[3]]$type,se = se,size=size, alpha=alpha,span = mult[[3]]$span, aes(x = x,y = y,color = n_colors1[3]))+
stat_smooth(method = mult[[4]]$type,se = se,size=size, alpha=alpha,span = mult[[4]]$span, aes(x = x,y = y,color = n_colors1[4]))+
stat_smooth(method = mult[[5]]$type,se = se,size=size, alpha=alpha,span = mult[[5]]$span, aes(x = x,y = y,color = n_colors1[5]))+
stat_smooth(method = mult[[6]]$type,se = se,size=size, alpha=alpha,span = mult[[6]]$span, aes(x = x,y = y,color = n_colors1[6]))
}else if(l <= 7){
plot <- plot +
stat_smooth(method = mult[[1]]$type,se = se,size=size, alpha=alpha,span = mult[[1]]$span, aes(x = x,y = y,color = n_colors1[1]))+
stat_smooth(method = mult[[2]]$type,se = se,size=size, alpha=alpha,span = mult[[2]]$span, aes(x = x,y = y,color = n_colors1[2]))+
stat_smooth(method = mult[[3]]$type,se = se,size=size, alpha=alpha,span = mult[[3]]$span, aes(x = x,y = y,color = n_colors1[3]))+
stat_smooth(method = mult[[4]]$type,se = se,size=size, alpha=alpha,span = mult[[4]]$span, aes(x = x,y = y,color = n_colors1[4]))+
stat_smooth(method = mult[[5]]$type,se = se,size=size, alpha=alpha,span = mult[[5]]$span, aes(x = x,y = y,color = n_colors1[5]))+
stat_smooth(method = mult[[6]]$type,se = se,size=size, alpha=alpha,span = mult[[6]]$span, aes(x = x,y = y,color = n_colors1[6]))+
stat_smooth(method = mult[[7]]$type,se = se,size=size, alpha=alpha,span = mult[[7]]$span, aes(x = x,y = y,color = n_colors1[7]))
}
}
plot <- plot + scale_color_manual(values = colors)
}else if (type == 'rm'){
plot +
geom_line(data = fit$data,aes(x = fit$data$x ,y = fit$data$y), col=line.color,size=line.size,alpha=line.alpha) +
ggtitle(paste0(title," \n",fit$name,"\n span = ",round(fit$span,2)))
}else if (type == 'rl'){
plot +
geom_line(aes(x, fit$fitted.values), col=line.color,size=line.size,alpha=line.alpha) +
ggtitle(paste0(title," \n",fit$name,"\n span = ",round(fit$span,2)))
}else if (type == 'g'){
plot +
geom_line(aes(x, fit), col=line.color,size=line.size,alpha=line.alpha)
# +
#   ggtitle(paste0(title," \n",fit$name,"\n span = ",round(fit$span,2)))
}
}
#plot.curves(x = x1,y = y)
plot.curves(x = dados$x,y = dados$y,labelx = "Temperatura (ºKelvin)",labely = "Coeficiente de Exp. Térmica",title = NULL)
rm(list=ls())
source(file = "funcoes.R",encoding = "UTF-8")
library(tidyverse)
library(binsmooth)
library(knitr)
library(kableExtra)
library(additive.models)
library(rms)
library(locfit)
knitr::opts_chunk$set(echo = FALSE,warning= FALSE, message= FALSE,
out.width = "100%",fig.align = "center",size ="large",fig.height = 2.5)
source(file = "funcoes.R",encoding = "UTF-8")
library(locfit)
library(splines)
library(segmented)
library(rms)
library(pacman)
library(igraph)
library(zoo)
## Init files (always execute, eta: 10s)
source("01_init.R",)                   # Helper functions to load packages
source("02_packages.R")               # Load all necessary packages
source("03_functions.R")              # Load project specific functions
df_train1 <- read_csv("data/dataset_1_train.txt")
df_test1 <- read_csv("data/dataset_1_test.txt")
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday",
"Sunday")
df_train1$DayOfWeek <- factor(df_train1$DayOfWeek, labels=weekdays,
ordered=TRUE)
ggplot(df_train1, aes(DayOfWeek, PickupCount)) +
labs(title="Plot I: Beeswarm",
subtitle="Pickup count vs. day of the week") +
geom_beeswarm(color="black", alpha = 0.8) +
xlab("Weekday") +
ylab("Pickup count") +
theme_bw()
#rm(weekdays)
## Transform to time in hours
df_train1$TimeHours <- round((df_train1$TimeMin / 60), 0)
## Scatterplot
ggplot(df_train1, aes(TimeMin, PickupCount)) +
geom_point(stroke=0, alpha=0.8) +
theme_bw() +
labs(title="Plot II: Scatterplot",
subtitle="Pickup count vs. time of the day") +
scale_x_continuous(breaks=c(0, 360, 720, 1080, 1440),
labels=c("00:00", "06:00", "12:00", "18:00", "24:00")) +
ylab(label="Pickup Count") +
xlab("Time of the day")
x1            <- df_train1$TimeMin
y             <- df_train1$PickupCount
dados         <- data.frame(x = x1,  y = y)
x = dados$x
y = dados$y
#plot.curves(x = x1,y = y)
plot.curves(x = dados$x,y = dados$y,labelx = "Temperatura (ºKelvin)",labely = "Coeficiente de Exp. Térmica",title = NULL)
rm(list=ls())
source(file = "funcoes.R",encoding = "UTF-8")
library(tidyverse)
library(binsmooth)
library(knitr)
library(kableExtra)
library(additive.models)
library(rms)
library(locfit)
knitr::opts_chunk$set(echo = FALSE,warning= FALSE, message= FALSE,
out.width = "100%",fig.align = "center",size ="large",fig.height = 2.5)
source(file = "funcoes.R",encoding = "UTF-8")
library(locfit)
library(splines)
library(segmented)
library(rms)
library(pacman)
library(igraph)
library(zoo)
## Init files (always execute, eta: 10s)
#source("01_init.R",)                   # Helper functions to load packages
source("02_packages.R")               # Load all necessary packages
source("03_functions.R")              # Load project specific functions
df_train1 <- read_csv("data/dataset_1_train.txt")
df_test1 <- read_csv("data/dataset_1_test.txt")
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday",
"Sunday")
df_train1$DayOfWeek <- factor(df_train1$DayOfWeek, labels=weekdays,
ordered=TRUE)
ggplot(df_train1, aes(DayOfWeek, PickupCount)) +
labs(title="Plot I: Beeswarm",
subtitle="Pickup count vs. day of the week") +
geom_beeswarm(color="black", alpha = 0.8) +
xlab("Weekday") +
ylab("Pickup count") +
theme_bw()
#rm(weekdays)
## Transform to time in hours
df_train1$TimeHours <- round((df_train1$TimeMin / 60), 0)
source(file = "funcoes.R",encoding = "UTF-8")
library(locfit)
library(splines)
library(segmented)
library(rms)
library(pacman)
library(igraph)
library(zoo)
## Init files (always execute, eta: 10s)
#source("01_init.R",)                   # Helper functions to load packages
source("02_packages.R")               # Load all necessary packages
source("03_functions.R")              # Load project specific functions
df_train1 <- read_csv("data/dataset_1_train.txt")
df_test1 <- read_csv("data/dataset_1_test.txt")
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday",
"Sunday")
df_train1$DayOfWeek <- factor(df_train1$DayOfWeek, labels=weekdays,
ordered=TRUE)
ggplot(df_train1, aes(DayOfWeek, PickupCount)) +
labs(title="Plot I: Beeswarm",
subtitle="Pickup count vs. day of the week") +
geom_beeswarm(color="black", alpha = 0.8) +
xlab("Weekday") +
ylab("Pickup count") +
theme_bw()
#rm(weekdays)
## Transform to time in hours
df_train1$TimeHours <- round((df_train1$TimeMin / 60), 0)
## Scatterplot
ggplot(df_train1, aes(TimeMin, PickupCount)) +
geom_point(stroke=0, alpha=0.8) +
theme_bw() +
labs(title="Plot II: Scatterplot",
subtitle="Pickup count vs. time of the day") +
scale_x_continuous(breaks=c(0, 360, 720, 1080, 1440),
labels=c("00:00", "06:00", "12:00", "18:00", "24:00")) +
ylab(label="Pickup Count") +
xlab("Time of the day")
x1            <- df_train1$TimeMin
y             <- df_train1$PickupCount
dados         <- data.frame(x = x1,  y = y)
x = dados$x
y = dados$y
#plot.curves(x = x1,y = y)
plot.curves(x = dados$x,y = dados$y,labelx = "Temperatura (ºKelvin)",labely = "Coeficiente de Exp. Térmica",title = NULL)
#plot.curves(x = x3,y = y)
ggplot(df_train1, aes(TimeMin, PickupCount)) +
geom_point(stroke=0, alpha=0.8) +
theme_bw() +
labs(title=NULL, subtitle= NULL) +
scale_x_continuous(breaks=c(0, 360, 720, 1080, 1440),
labels=c("00:00", "06:00", "12:00", "18:00", "24:00")) +
ylab(label="Contagem de Coleta") +
xlab("Hora do Dia")
ggplot(df_train1, aes(TimeMin, PickupCount)) +
geom_point(stroke=0, alpha=0.8) +
theme_bw() +
labs(title=NULL, subtitle= NULL) +
scale_x_continuous(breaks=c(0, 360, 720, 1080, 1440),
labels=c("00:00", "06:00", "12:00", "18:00", "24:00")) +
ylab(label="Contagem de Coleta") +
xlab("Hora do Dia") +
axis_theme()
axis_theme <- theme_bw()  +
theme(
axis.text.x = element_text(angle = 0,face = "bold",size = textsize),
axis.text.y = element_text(angle = 0,face = "bold",size = textsize),
legend.background = element_rect(fill = "transparent", colour = NA,size = 2),
panel.background = element_rect(fill = "transparent", colour = NA),
plot.background = element_rect(fill = "white", colour = NA),
axis.title.x = element_text(colour = "black",size = textsize,face = "bold"),
axis.title.y = element_text(colour = "black",size = textsize,face = "bold"),
legend.title = element_text(colour = "black",size = 10),
legend.position = "right",
legend.text = element_text(colour = "black",size = 8,face = "bold"),
panel.grid = element_line(linetype="dashed"),
panel.grid.major = element_line(colour = "gray"),
title =element_text(size=textsize, face='bold',hjust = 0.5),
plot.title = element_text(hjust = 0.5),
axis.title = element_text(color="#000000", face="bold", size=textsize,lineheight = 2))
ggplot(df_train1, aes(TimeMin, PickupCount)) +
geom_point(stroke=0, alpha=0.8) +
theme_bw() +
labs(title=NULL, subtitle= NULL) +
scale_x_continuous(breaks=c(0, 360, 720, 1080, 1440),
labels=c("00:00", "06:00", "12:00", "18:00", "24:00")) +
ylab(label="Contagem de Coleta") +
xlab("Hora do Dia") +
axis_theme()
ggplot(df_train1, aes(TimeMin, PickupCount)) +
geom_point(stroke=0, alpha=0.8) +
theme_bw() +
labs(title=NULL, subtitle= NULL) +
scale_x_continuous(breaks=c(0, 360, 720, 1080, 1440),
labels=c("00:00", "06:00", "12:00", "18:00", "24:00")) +
ylab(label="Contagem de Coleta") +
xlab("Hora do Dia") +
axis.theme()
###  LOOCV
df        <- cbind(x= dados$x,y = dados$y) %>% as.data.frame
tr= 1:nrow(df)
dftr= df[tr,]
number_of_bins   = seq(0.1,0.29,0.01)
number_of_bins_sp= 1:length(number_of_bins)
cv.errors.loess  = matrix( NA,nrow =  nrow(df), ncol = length(number_of_bins) )
cv.errors.kernel = matrix( NA,nrow =  nrow(df), ncol = length(number_of_bins) )
cv.errors.sp1 = matrix( NA,nrow =  nrow(df), ncol = length(number_of_bins_sp) )
cv.errors.sp3 = matrix( NA,nrow =  nrow(df), ncol = length(number_of_bins_sp) )
for( i in 1:length(number_of_bins)){ # for each number of knots to test
for( j in tr ){ # for each fold
fit.loess              <- loess(y ~ x,degree=1, span = number_of_bins[i], data=df[tr!=j,])
loess.pred             = predict( fit.loess, newdata=data.frame(x = df$x[tr==j]) )
cv.errors.loess[j,i]   = mean( ( df$y[tr==j] - loess.pred )^2,na.rm = TRUE )
fit.kernel             <- locfit(y ~ x,deg=1, alpha = number_of_bins[i],kern="gauss", data=df[tr!=j,])
kernel.pred            <- predict( fit.kernel, newdata=data.frame(x = df$x[tr==j]) )
cv.errors.kernel[j,i]  <- mean( ( df$y[tr==j] - kernel.pred )^2,na.rm = TRUE )
p              <-  seq(1,(i),1)/(i+1)
knots          <-  quantile(df$x[tr!=j]  , p = p)
fit.spg1       <-  ols(as.formula(glue::glue("y ~ lsp(x, knots)")), data=df[tr!=j,])
spg1.pred    <- predict( fit.spg1, newdata=data.frame(x = df$x[tr==j]) )
cv.errors.sp1[j,i] <- mean( ( df$y[tr==j] - spg1.pred )^2,na.rm = TRUE )
#p              <-  seq(1,i-1,1)/i
knots          <-  quantile(df$x[tr!=j]  , p = p)
fit.spg3       <- lm(y ~ bs(x, knots = knots), data=df[tr!=j,] )
spg3.pred      <- predict( fit.spg3, newdata=data.frame(x = df$x[tr==j]) )
cv.errors.sp3[j,i] <- mean( ( df$y[tr==j] - spg3.pred )^2,na.rm = TRUE )
}}
cv.errors.mean.sp1   = apply(cv.errors.sp1,2,mean,na.rm = TRUE)
min.cv.index.sp1     = which.min( cv.errors.mean.sp1 )
cv.min.sp1           = cv.errors.mean.sp1[min.cv.index.sp1]
par.sp1              = number_of_bins_sp[min.cv.index.sp1]
cv.errors.mean.sp3   = apply(cv.errors.sp3,2,mean,na.rm = TRUE)
min.cv.index.sp3     = which.min( cv.errors.mean.sp3 )
cv.min.sp3           = cv.errors.mean.sp3[min.cv.index.sp3]
par.sp3              = number_of_bins_sp[min.cv.index.sp3]
cv.errors.mean.loess   = apply(cv.errors.loess,2,mean,na.rm = TRUE)
min.cv.index.loess     = which.min( cv.errors.mean.loess )
cv.min.loess           = cv.errors.mean.loess[min.cv.index.loess]
par.loess              = number_of_bins[min.cv.index.loess]
### Kernel (Nadaraya-Watson) LOOCV
cv.errors.mean.kernel  = apply(cv.errors.kernel,2,mean,na.rm = TRUE)
min.cv.index.kernel    = which.min( cv.errors.mean.kernel )
cv.min.kernel          = cv.errors.mean.kernel[min.cv.index.kernel]
par.kernel              = number_of_bins[min.cv.index.kernel]
mt <- c()
mt <- rbind(mt,c(cv.min.kernel,cv.min.loess,cv.min.sp1,cv.min.sp3,par.loess,par.kernel,par.sp1,par.sp3))
df <- data.frame(x = x, y = y)
df1 <- data.frame(x = number_of_bins, y = cv.errors.mean.kernel,EQM = cv.errors.mean.kernel)
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
p4.cv <-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Bandwidth",y = "EQM") +
geom_vline(xintercept = par.kernel,color ="red")+
annotate("text",x = number_of_bins[min.cv.index.kernel]-0.06,y = max(cv.errors.mean.kernel)*0.985,label=paste0("Span:",number_of_bins[min.cv.index.kernel],"\nEQM:",round(cv.min.kernel,2))) +
axis.theme()
par4 = number_of_bins[min.cv.index.kernel]
### Kernel (Nadaraya-Watson) LOOCV
df <- data.frame(x = x, y = y)
df1 <- data.frame(x = number_of_bins, y = cv.errors.mean.loess,EQM = cv.errors.mean.loess)
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
p5.cv <-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Span",y = "EQM") +
geom_vline(xintercept = par.loess,color ="red")+
annotate("text",x = number_of_bins[min.cv.index.loess]-0.06,y = max(cv.errors.mean.loess)*0.985,label=paste0("Span:",number_of_bins[min.cv.index.loess],"\nEQM:",round(cv.min.loess,2))) +
axis.theme()
par5 = number_of_bins[min.cv.index.loess]
df <- data.frame(x = dados$x, y = dados$y)
df1 <- data.frame(x = number_of_bins_sp, y = cv.errors.mean.sp1,EQM = cv.errors.mean.sp1)
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
p6.cv <-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Nº de Nós",y = "EQM") +
geom_vline(xintercept = number_of_bins_sp[min.cv.index.sp1],color ="red")+
annotate("text",x = number_of_bins_sp[min.cv.index.sp1]+6,y = max(cv.errors.mean.sp1)*0.90,label=paste0("Nº Nós:",par.sp1,"\nEQM:",round(cv.min.sp1,2))) +
axis.theme()
par6 = number_of_bins[min.cv.index.sp1]
df <- data.frame(x = x, y = y)
df1 <- data.frame(x = number_of_bins_sp, y = cv.errors.mean.sp3,EQM = cv.errors.mean.sp3)
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
p7.cv <-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Nº de Nós",y = "EQM") +
geom_vline(xintercept = number_of_bins_sp[min.cv.index.sp3],color ="red")+
annotate("text",x = number_of_bins_sp[min.cv.index.sp3]+6,y = max(cv.errors.mean.sp3)*0.97,label=paste0("Nº Nós:",par.sp3,"\nEQM:",round(cv.min.sp3,2))) +
axis.theme()
par7 = number_of_bins[min.cv.index.sp3]
partial_plots <- cowplot::plot_grid(p4.cv,p5.cv,p6.cv,p7.cv,ncol=2,nrow = 2,labels=LETTERS[1:4])
partial_plots
fit4 <- loess(y ~ x, degree=1, span = par.loess, data=dados)
# kernel - span = 6
fit5 <-  locfit(y ~ x,deg=1, alpha = par.kernel,kern="gauss", data=dados)
#Spline grau 1
k = par.sp1
p         <-  seq(1,k-1,1)/(k)
knots     <-  quantile(dados$x  , p = p)
fit6       <-  ols(as.formula(glue::glue("y ~ lsp(x, knots)")), data = dados)
# spline cubico
require(splines)
k = par.sp3
p         <-  seq(1,k-1,1)/(k)
knots     <-  quantile(dados$x  , p = p)
fit7 <- lm(y ~ bs(x, knots = knots),data = dados )
fit8 <- lm(y ~ poly(x = x,degree = 3),data = dados)
spans = c(par4,par5,par6,par7)
df = cbind(x= dados$x, y = dados$y,Kernel = fitted.values(fit5), Loess = fit4$fitted,`Spline Grau 1`= predict(fit6),`Spline Cubico`= fit7$fitted,`Pol. Cúbico` = fit8$fitted.values)
df1 = df %>% as.data.frame
colnames(df) = c("x", "y",
paste0("A1 ", "Kernel|Width: ", par.kernel),
paste0("A2 ", "Loess|Span: ", par.loess),
paste0("A3 ", "Spline Grau 1|Nº Nós: ", par.sp1),
paste0("A4 ", "Spline Grau 3|Nº Nós: ", par.sp3),
paste0("A5 ", "Polinómio Cúbico"))
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
library(Metrics)
df_metrics <- data.frame(Smoother = c("Kernel", "Loess","Sp. Reg. Linear","Sp. Reg. Cúbico"),
`Parâm. Suavizador` = c(par.kernel,par.loess,as.integer(round(par.sp1,0)),as.integer(round(par.sp3,0))),
EQM      =  c( round(cv.min.kernel,4),round(cv.min.loess,4),round(cv.min.sp1,4),round(cv.min.sp3,4))
)
colnames(df_metrics) <- c("Suavizador","Parâm. Suavizador","EQM")
kable_data(data = df_metrics,cap = "\\label{tab:tab_eqm_aplicacao1} Erro Quadrático Médio ($EQM_{loocv}$) para os suavizadores Loess, Kernel e Splines de Regressão Linear e Cúbico (Aplicação 1). ",foot = NULL,c_names = c("Suavizador","Parâm. Suavizador","EQM"),line.spec = 4,row.spc = T)
plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",line.s = 1.05,alpha.o = .99)
#library(tidyverse)
dados = data.frame(x,y)
true = fit4$fitted
df = cbind(dados$x, dados$y, true) %>% as.data.frame
colnames(df) = c("x", "y","Curva real")
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
p1 <- plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",legend.pos = "none")
true = fitted(fit5)
df = cbind(dados$x, dados$y, true) %>% as.data.frame
colnames(df) = c("x", "y","Curva real")
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
p2 <- plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",legend.pos = "none")
true = fit6$fitted.values
df = cbind(dados$x, dados$y, true) %>% as.data.frame
colnames(df) = c("x", "y","Curva real")
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
p3 <- plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",legend.pos = "none")
true = fit7$fitted.values
df = cbind(dados$x, dados$y, true) %>% as.data.frame
colnames(df) = c("x", "y","Curva real")
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
p4 <- plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",legend.pos = "none")
true = fit8$fitted.values
df = cbind(dados$x, dados$y, true) %>% as.data.frame
colnames(df) = c("x", "y","Curva real")
df = as_tibble(df) %>%
gather(key = "variable", value = "value", -x, -y )
p5 <- plot.mult.curves(df = dados,df_fit = df,title = NULL,labelx = "X",labely = "Y",legend.pos = "none")
pcol    <- cowplot::plot_grid(p1,p2,p3,p4,p5, align = "hv",ncol = 2, nrow = 3,labels = LETTERS[1:6])
#p_fim   <- cowplot::plot_grid(pcol,legend_,rel_widths = c(3,0.5))
pcol
library(Metrics)
df_metrics <- data.frame(Smoother = c("Kernel", "Loess","Sp. Reg. Linear","Sp. Reg. Cúbico","Polinômio Cúbico"),
`Parâm. Suavizador` = c(par.kernel,par.loess,par.sp1,par.sp3,""),
EQM      =  c( round(rse(df$y,fitted.values(fit4)),6),
round(rse(df$y,fitted.values(fit5)),6),
round(rse(df$y,fitted.values(fit6)),6),
round(rse(df$y,fitted.values(fit7)),6),
round(rse(df$y,fitted.values(fit8)),6))
)
colnames(df_metrics) <- c("Suavizador","Parâm. Suavizador","EQM")
kable_data(data = df_metrics,cap = "\\label{tab:tab_eqm_aplicacao1_geral} Erro Quadrático Médio ($EQM_c$) para os suavizadores Loess, Kernel e Splines de Regressão Linear e Cúbico.",foot = NULL,c_names = c("Suavizador","Parâm. Suavizador","EQM"),row.spc = T,line.spec = 4)
rm(list=ls())
source(file = "funcoes.R",encoding = "UTF-8")
library(tidyverse)
library(binsmooth)
library(knitr)
library(kableExtra)
library(additive.models)
library(rms)
library(locfit)
knitr::opts_chunk$set(echo = FALSE,warning= FALSE, message= FALSE,
out.width = "100%",fig.align = "center",size ="large",fig.height = 2.5)
library(dplyr)
library(knitr)
library(kableExtra)
dados_final <- read.csv("dados_sim_final_cen1.csv",header = TRUE)
# dados_final$var <- ifelse( (dados_final$var == 2 & dados_final$n == 300) ,1,dados_final$var)
# dados_final$var <- ifelse( (dados_final$var == 3 & dados_final$n == 300) ,2,dados_final$var)
table_comp <- tapply(X = dados_final$EQM_MIN,INDEX = dados_final$Tipo,FUN = table)
table_mt <- matrix(data = 0,nrow = 9,ncol = 4)
df_comp  <- as.data.frame(table_mt)
colnames(df_comp) <- c(1,2,3,4)
for(i in 1:9){
ind = colnames(df_comp)%in% names(table_comp[[i]])
pos = which(ind)
df_comp[i,pos] <- table_comp[[i]]
}
df_comp_prop <- df_comp %>% mutate(Kernel = paste0(format(round(((`1`)/1000)*100,2),decimal.mark = ","),"\\%"),
Loess = paste0(format(round(((`2` )/1000)*100,2),decimal.mark = ","),"\\%"),
`Sp. Reg. 1` = paste0(format(round(((`3` )/1000)*100,2),decimal.mark = ","),"\\%"),
`Sp. Reg. 3` = paste0(format(round(((`4` )/1000)*100,2),decimal.mark = ","),"\\%"))
df_leg <- data.frame(
`Sub-Cenário` = c(1:9),
Tamanho = c(150,150,150,250,250,250,350,350,350),
`Desvio Padrão` = c(0.5,1,2,0.5,1,2,0.5,1,2))
df_comp_prop <- cbind(df_leg,df_comp_prop)
df_tb <- df_comp_prop[,c(1,2,3,8,9,10,11)]
df_tb[3,6] <- paste0("\\textbf{", df_tb[1,6],"}")
df_tb[1,7] <- paste0("\\textbf{", df_tb[1,6],"}")
df_tb[2,7] <- paste0("\\textbf{", df_tb[2,7],"}")
df_tb[4,7] <- paste0("\\textbf{", df_tb[4,7],"}")
df_tb[5,7] <- paste0("\\textbf{", df_tb[5,7],"}")
df_tb[6,7] <- paste0("\\textbf{", df_tb[6,7],"}")
df_tb[7,7] <- paste0("\\textbf{", df_tb[7,7],"}")
df_tb[8,7] <- paste0("\\textbf{", df_tb[8,7],"}")
df_tb[9,7] <- paste0("\\textbf{", df_tb[9,7],"}")
c_names = c("Sub-Cenário","Tamanho","Desvio Padrão", "Kernel","Lowess","Sp. Reg. Linear","Sp. Reg. Cúbico")
colnames(df_tb) <- c_names
kable_data(data = df_tb ,cap = "\\label{tab:tab_simulacao_namostras_cenario1} Percentual do Erro quadrático médio $EQM_{loocv}$ mínimo, obtidos por meio de aplicação do Procedimento 1, para seleção do melhor parâmetro de suavização,  considerando cada suavizador em 1000 amostras.",foot = NULL,c_names = c_names,escp = FALSE) %>%
kable_styling(latex_options = "scale_down")
library(dplyr)
library(knitr)
library(kableExtra)
dados_final <- read.csv("dados_sim_final_cen1.csv",header = TRUE)
# dados_final$var <- ifelse( (dados_final$var == 2 & dados_final$n == 300) ,1,dados_final$var)
# dados_final$var <- ifelse( (dados_final$var == 3 & dados_final$n == 300) ,2,dados_final$var)
table_comp <- tapply(X = dados_final$EQM_MIN,INDEX = dados_final$Tipo,FUN = table)
table_mt <- matrix(data = 0,nrow = 9,ncol = 4)
df_comp  <- as.data.frame(table_mt)
colnames(df_comp) <- c(1,2,3,4)
for(i in 1:9){
ind = colnames(df_comp)%in% names(table_comp[[i]])
pos = which(ind)
df_comp[i,pos] <- table_comp[[i]]
}
df_comp_prop <- df_comp %>% mutate(Kernel = paste0(format(round(((`1`)/1000)*100,2),decimal.mark = ","),"\\%"),
Loess = paste0(format(round(((`2` )/1000)*100,2),decimal.mark = ","),"\\%"),
`Sp. Reg. 1` = paste0(format(round(((`3` )/1000)*100,2),decimal.mark = ","),"\\%"),
`Sp. Reg. 3` = paste0(format(round(((`4` )/1000)*100,2),decimal.mark = ","),"\\%"))
df_leg <- data.frame(
`Sub-Cenário` = c(1:9),
Tamanho = c(150,150,150,250,250,250,350,350,350),
`Desvio Padrão` = c(0.5,1,2,0.5,1,2,0.5,1,2))
df_comp_prop <- cbind(df_leg,df_comp_prop)
df_tb <- df_comp_prop[,c(1,2,3,8,9,10,11)]
df_tb[3,6] <- paste0("\\textbf{", df_tb[3,6],"}")
df_tb[1,7] <- paste0("\\textbf{", df_tb[1,6],"}")
df_tb[2,7] <- paste0("\\textbf{", df_tb[2,7],"}")
df_tb[4,7] <- paste0("\\textbf{", df_tb[4,7],"}")
df_tb[5,7] <- paste0("\\textbf{", df_tb[5,7],"}")
df_tb[6,7] <- paste0("\\textbf{", df_tb[6,7],"}")
df_tb[7,7] <- paste0("\\textbf{", df_tb[7,7],"}")
df_tb[8,7] <- paste0("\\textbf{", df_tb[8,7],"}")
df_tb[9,7] <- paste0("\\textbf{", df_tb[9,7],"}")
c_names = c("Sub-Cenário","Tamanho","Desvio Padrão", "Kernel","Lowess","Sp. Reg. Linear","Sp. Reg. Cúbico")
colnames(df_tb) <- c_names
kable_data(data = df_tb ,cap = "\\label{tab:tab_simulacao_namostras_cenario1} Percentual do Erro quadrático médio $EQM_{loocv}$ mínimo, obtidos por meio de aplicação do Procedimento 2, para seleção do melhor parâmetro de suavização,  considerando cada suavizador em 1000 amostras.",foot = NULL,c_names = c_names,escp = FALSE) %>%
kable_styling(latex_options = "scale_down")
