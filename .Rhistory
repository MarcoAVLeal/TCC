paste("Ajuste2\nKernel Smoother\nBandwidth : 0.22 \n"),
paste("Ajuste3\nSplines de Regressão\nCubico\nNós : c(0.5,0.75,1.25)"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
plot.mult.curves(df = df1,title = NULL)
predict(fit.loess,df_val$X)
library(additive.models)
source(file = "funcoes.R",encoding = "UTF-8")
library(tidyverse)
library(binsmooth)
library(knitr)
library(kableExtra)
library(additive.models)
knitr::opts_chunk$set(echo = FALSE,warning= FALSE, message= FALSE,
out.width = "100%",fig.align = "center",size ="large",fig.height = 3)
library(additive.models)
library(caret)
n <- 1e3
set.seed(103159)
n           <- 50
x           <- seq(0,2,0.01)
norms       <- rnorm(length(x),0,0.25)
dens_gamma  <- dgamma(x = x,shape = 6,rate = 10)
y           <- dens_gamma + norms
dados       <- data.frame(x=x,y=y,variable = "Gamma(6,10)",value = dens_gamma)
df        <- cbind(dados$x,dados$y)
fit.loess              <-  lowess(x = dados$x,y = dados$y,f = 0.25)$y
fit.kssmooth           <-  ksmooth(x = dados$x,y = dados$y,kernel ="normal", bandwidth = 0.22)$y
k=3
p         <-  seq(1,k-1,1)/k
knots     <-  quantile(dados$x, p = p)
#fit.splinecubico       <-  lm(dados$y ~ ns(dados$x,knots = knots,df = 3) )$fitted.values
fit.splinecubico       <-  additive.spline.cubic(x = dados$x, y = dados$y, k = k,knots = c(0,0.5,0.75,1.25))$fitted.values
df1      <-  cbind(df,fit.loess,fit.kssmooth,fit.splinecubico)
colnames(df1) <- c("x","y",
paste("Ajuste1\nLowess\nSpan : 0.25 \n"),
paste("Ajuste2\nKernel Smoother\nBandwidth : 0.22 \n"),
paste("Ajuste3\nSplines de Regressão\nCubico\nNós : c(0.5,0.75,1.25)"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
#plot.mult.curves(df = df1,title = NULL)
library(additive.models)
source(file = "funcoes.R",encoding = "UTF-8")
library(tidyverse)
library(binsmooth)
library(knitr)
library(kableExtra)
library(additive.models)
knitr::opts_chunk$set(echo = FALSE,warning= FALSE, message= FALSE,
out.width = "100%",fig.align = "center",size ="large",fig.height = 3)
library(additive.models)
library(caret)
n <- 1e3
set.seed(103159)
n           <- 50
x           <- seq(0,2,0.01)
norms       <- rnorm(length(x),0,0.25)
dens_gamma  <- dgamma(x = x,shape = 6,rate = 10)
y           <- dens_gamma + norms
dados       <- data.frame(x=x,y=y,variable = "Gamma(6,10)",value = dens_gamma)
df        <- cbind(dados$x,dados$y)
fit.loess              <-  lowess(x = dados$x,y = dados$y,f = 0.25)$y
fit.kssmooth           <-  ksmooth(x = dados$x,y = dados$y,kernel ="normal", bandwidth = 0.22)$y
k=3
p         <-  seq(1,k-1,1)/k
knots     <-  quantile(dados$x, p = p)
#fit.splinecubico       <-  lm(dados$y ~ ns(dados$x,knots = knots,df = 3) )$fitted.values
fit.splinecubico       <-  additive.spline.cubic(x = dados$x, y = dados$y, k = k,knots = c(0,0.5,0.75,1.25))$fitted.values
df1      <-  cbind(df,fit.loess,fit.kssmooth,fit.splinecubico)
library(Metrics)
df1      <-  cbind(c("X","Y") = df,"Loess" = fit.loess,"Kernel" = fit.kssmooth,"S.Cub" =fit.splinecubico)
df1      <-  cbind( df,"Loess" = fit.loess,"Kernel" = fit.kssmooth,"S.Cub" =fit.splinecubico)
df1      <-  cbind( df,"Loess" = fit.loess,"Kernel" = fit.kssmooth,"S.Cub" =fit.splinecubico) %>% as.data.frame
df1      <-  cbind( df,"Loess" = fit.loess,"Kernel" = fit.kssmooth,"Spline" =fit.splinecubico) %>% as.data.frame
library(additive.models)
source(file = "funcoes.R",encoding = "UTF-8")
library(tidyverse)
library(binsmooth)
library(knitr)
library(kableExtra)
library(additive.models)
knitr::opts_chunk$set(echo = FALSE,warning= FALSE, message= FALSE,
out.width = "100%",fig.align = "center",size ="large",fig.height = 3)
library(additive.models)
library(caret)
n <- 1e3
set.seed(103159)
n           <- 50
x           <- seq(0,2,0.01)
norms       <- rnorm(length(x),0,0.25)
dens_gamma  <- dgamma(x = x,shape = 6,rate = 10)
y           <- dens_gamma + norms
dados       <- data.frame(x=x,y=y,variable = "Gamma(6,10)",value = dens_gamma)
df        <- cbind(dados$x,dados$y)
fit.loess              <-  lowess(x = dados$x,y = dados$y,f = 0.25)$y
fit.kssmooth           <-  ksmooth(x = dados$x,y = dados$y,kernel ="normal", bandwidth = 0.22)$y
k=3
p         <-  seq(1,k-1,1)/k
knots     <-  quantile(dados$x, p = p)
#fit.splinecubico       <-  lm(dados$y ~ ns(dados$x,knots = knots,df = 3) )$fitted.values
fit.splinecubico       <-  additive.spline.cubic(x = dados$x, y = dados$y, k = k,knots = c(0,0.5,0.75,1.25))$fitted.values
df1      <-  cbind( df,"Loess" = fit.loess,"Kernel" = fit.kssmooth,"Spline" = fit.splinecubico) %>% as.data.frame
# colnames(df1) <- c("x","y",
#                     paste("Ajuste1\nLowess\nSpan : 0.25 \n"),
#                     paste("Ajuste2\nKernel Smoother\nBandwidth : 0.22 \n"),
#                     paste("Ajuste3\nSplines de Regressão\nCubico\nNós : c(0.5,0.75,1.25)"))
#
# df1 <- as.tibble(df1) %>%
#   gather(key = "variable", value = "value",-x,-y)
#plot.mult.curves(df = df1,title = NULL)
library(Metrics)
# rmse(df1$
#      ,df1$)
#fit.splinecubico       <-  lm(dados$y ~ ns(dados$x,knots = knots,df = 3) )$fitted.values
fit_splinecubico       <-  additive.spline.cubic(x = dados$x, y = dados$y, k = k,knots = c(0,0.5,0.75,1.25))$fitted.values
df1      <-  cbind( df,"Loess" = fit.loess,"Kernel" = fit.kssmooth,"Spline" = fit_splinecubico) %>% as.data.frame
View(df1)
#fit.splinecubico       <-  lm(dados$y ~ ns(dados$x,knots = knots,df = 3) )$fitted.values
fit_splinecubico       <-  additive.spline.cubic(x = dados$x, y = dados$y, k = k,knots = c(0,0.5,0.75,1.25))$fitted.values
#fit.splinecubico       <-  lm(dados$y ~ ns(dados$x,knots = knots,df = 3) )$fitted.values
fit_splinecubico       <-  additive.spline.cubic(x = dados$x, y = dados$y, k = k,knots = c(0,0.5,0.75,1.25))$fitted.values[,1]
df1      <-  cbind( df,"Loess" = fit.loess,"Kernel" = fit.kssmooth,"Spline" = fit_splinecubico) %>% as.data.frame
df        <- cbind("X" = dados$x,"Y =dados$y)
df        <- cbind("X" = dados$x,"Y" =dados$y)
df        <- cbind("X" = dados$x,"Y" = dados$y)
fit.loess              <-  lowess(x = dados$x,y = dados$y,f = 0.25)$y
fit.kssmooth           <-  ksmooth(x = dados$x,y = dados$y,kernel ="normal", bandwidth = 0.22)$y
k=3
p         <-  seq(1,k-1,1)/k
knots     <-  quantile(dados$x, p = p)
knots     <-  quantile(dados$x, p = p)
#fit.splinecubico       <-  lm(dados$y ~ ns(dados$x,knots = knots,df = 3) )$fitted.values
fit_splinecubico       <-  additive.spline.cubic(x = dados$x, y = dados$y, k = k,knots = c(0,0.5,0.75,1.25))$fitted.values[,1]
df1      <-  cbind( df,"Loess" = fit.loess,"Kernel" = fit.kssmooth,"Spline" = fit_splinecubico) %>% as.data.frame
rmse(actual = df1$Y,df1$Loess)
sqrt(mean((df1$Y - df1$Loess)^2))
df_metrics <- data.frame(Smoother = c("Loess","Kernel","Cubic Spline"),
EQM      =  c(rmse(actual = df1$Y,df1$Loess),rmse(actual = df1$Y,df1$Kernel,rmse(actual = df1$Y,df1$Spline))))
df_metrics <- data.frame(Smoother = c("Loess","Kernel","Cubic Spline"),
EQM      =  c(rmse(actual = df1$Y,df1$Loess),rmse(actual = df1$Y,df1$Kernel),rmse(actual = df1$Y,df1$Spline)))
df_metrics
kable_data(data = df_metrics,cap = "Erro Quadrática Médio para os suavizadores Loess, Kernel e Spline Cúbico",foot = NULL)
```{r,include=T}
kable_data(data = df_metrics,cap = "Erro Quadrática Médio para os suavizadores Loess, Kernel e Spline Cúbico",foot = NULL)
sapply(X = 1:100,FUN = best_span)
best_span <- function(f){
fit.loess              <-  lowess(x = df$X,y = df$Y,f = f)$y
eqm                    <-  rmse(actual = df$Y,fit.loess)
return(data.frame(Span = f,EQM = eqm))
}
sapply(X = 1:100,FUN = best_span)
best_span <- function(f,df){
fit.loess              <-  lowess(x = df$X,y = df$Y,f = f)$y
eqm                    <-  rmse(actual = df$Y,fit.loess)
return(data.frame(Span = f,EQM = eqm))
}
sapply(X = 1:100,FUN = best_span,df)
best_span <- function(f,df){
fit.loess              <-  lowess(x = df$X,y = df$Y,f = f)$y
eqm                    <-  rmse(actual = df$Y,fit.loess)
return(data.frame(Span = f,EQM = eqm))
}
sapply(X = 1:100,FUN = best_span,df1)
teste = sapply(X = 1:100,FUN = best_span,df1)
teste
best_span <- function(f,df){
fit.loess              <-  lowess(x = df$X,y = df$Y,f = f)$y
eqm                    <-  rmse(actual = df$Y,fit.loess)
return(c(Span = f,EQM = eqm))
}
teste = sapply(X = 1:100,FUN = best_span,df1)
teste
teste = sapply(X = seq(0,1,0.01),FUN = best_span,df1)
teste = sapply(X = seq(0.1,1,0.01),FUN = best_span,df1)
teste
View(teste)
teste = sapply(X = seq(0.01,1,0.001),FUN = best_span,df1)
teste
teste = sapply(X = seq(0.001,1,0.001),FUN = best_span,df1)
teste
View(teste)
View(teste)
teste = sapply(X = seq(0.001,1,0.001),FUN = best_span,df1)
teste1 = reshape2::melt(teste)
View(teste1)
best_span <- function(f,df){
fit.loess              <-  lowess(x = df$X,y = df$Y,f = f)$y
eqm                    <-  rmse(actual = df$Y,fit.loess)
return(c(f,eqm))
}
teste = sapply(X = seq(0.001,1,0.001),FUN = best_span,df1)
teste = lapply(X = seq(0.001,1,0.001),FUN = best_span,df1)
View(teste)
teste = sapply(X = seq(0.001,1,0.001),FUN = best_span,df1) %>% t
View(teste)
teste = sapply(X = seq(0.001,1,0.001),FUN = best_span,df1) %>% t %>% as.data.frame %>% dplyr::rename(V1 = "Span",V2 = "EQM")
teste = sapply(X = seq(0.001,1,0.001),FUN = best_span,df1) %>% t %>% as.data.frame
teste = sapply(X = seq(0.001,1,0.001),FUN = best_span,df1) %>%
t %>%
as.data.frame %>% dplyr::rename("Span" = v1,"EQM" = v2)
teste = sapply(X = seq(0.001,1,0.001),FUN = best_span,df1) %>%
t %>%
as.data.frame %>% dplyr::rename("Span" = V1,"EQM" = V2)
which.min(teste$EQM)
teste[which.min(teste$EQM),]
best_span <- function(f,df){
fit.loess              <-  lowess(x = df$X,y = df$Y,f = f)$y
eqm                    <-  rmse(actual = df$Y,fit.loess)
return(c(Span = f,EQM = eqm))
}
teste = sapply(X = seq(0.001,1,0.001),FUN = best_span,df1) %>%
t %>%
as.data.frame %>% dplyr::rename("Span" = V1,"EQM" = V2)
library(additive.models)
source(file = "funcoes.R",encoding = "UTF-8")
library(tidyverse)
library(binsmooth)
library(knitr)
library(kableExtra)
library(additive.models)
knitr::opts_chunk$set(echo = FALSE,warning= FALSE, message= FALSE,
out.width = "100%",fig.align = "center",size ="large",fig.height = 3)
library(additive.models)
library(caret)
n <- 1e3
set.seed(103159)
n           <- 50
x           <- seq(0,2,0.01)
norms       <- rnorm(length(x),0,0.25)
dens_gamma  <- dgamma(x = x,shape = 6,rate = 10)
y           <- dens_gamma + norms
dados       <- data.frame(x=x,y=y,variable = "Gamma(6,10)",value = dens_gamma)
df        <- cbind("X" = dados$x,"Y" = dados$y)
fit.loess              <-  lowess(x = dados$x,y = dados$y,f = 0.25)$y
fit.kssmooth           <-  ksmooth(x = dados$x,y = dados$y,kernel ="normal", bandwidth = 0.22)$y
k=3
p         <-  seq(1,k-1,1)/k
knots     <-  quantile(dados$x, p = p)
#fit.splinecubico       <-  lm(dados$y ~ ns(dados$x,knots = knots,df = 3) )$fitted.values
fit_splinecubico       <-  additive.spline.cubic(x = dados$x, y = dados$y, k = k,knots = c(0,0.5,0.75,1.25))$fitted.values[,1]
df1      <-  cbind( df,"Loess" = fit.loess,"Kernel" = fit.kssmooth,"Spline" = fit_splinecubico) %>% as.data.frame
# colnames(df1) <- c("x","y",
#                     paste("Ajuste1\nLowess\nSpan : 0.25 \n"),
#                     paste("Ajuste2\nKernel Smoother\nBandwidth : 0.22 \n"),
#                     paste("Ajuste3\nSplines de Regressão\nCubico\nNós : c(0.5,0.75,1.25)"))
#
# df1 <- as.tibble(df1) %>%
#   gather(key = "variable", value = "value",-x,-y)
#plot.mult.curves(df = df1,title = NULL)
library(Metrics)
rmse(actual = df1$Y,df1$Loess)
sqrt(mean((df1$Y - df1$Loess)^2))
df_metrics <- data.frame(Smoother = c("Loess","Kernel","Cubic Spline"),
EQM      =  c(rmse(actual = df1$Y,df1$Loess),rmse(actual = df1$Y,df1$Kernel),rmse(actual = df1$Y,df1$Spline)))
best_span <- function(f,df){
fit.loess              <-  lowess(x = df$X,y = df$Y,f = f)$y
eqm                    <-  rmse(actual = df$Y,fit.loess)
return(c(Span = f,EQM = eqm))
}
teste = sapply(X = seq(0.001,1,0.001),FUN = best_span,df1) %>%
t %>%
as.data.frame %>% dplyr::rename("Span" = V1,"EQM" = V2)
teste = sapply(X = seq(0.001,1,0.001),FUN = best_span,df1) %>%
t %>%
as.data.frame
View(teste)
teste[which.min(teste$EQM),]
bf <- teste[which.min(teste$EQM),]
bf[,1]
best_span <- function(f,df){
fit.loess              <-  lowess(x = df$X,y = df$Y,f = f)$y
eqm                    <-  rmse(actual = df$Y,fit.loess)
return(c(Span = f,EQM = eqm))
}
teste = sapply(X = seq(0.001,1,0.001),FUN = best_span,df1) %>%
t %>%
as.data.frame
bf <- teste[which.min(teste$EQM),]
fit.loess              <-  lowess(x = dados$x,y = dados$y,f = bf[,1])$y
df1      <-  cbind( df,"Loess" = fit.loess) %>% as.data.frame
colnames(df1) <- c("x","y",
paste("Ajuste1\nLowess\nSpan : 0.25 \n"),
paste("Ajuste2\nKernel Smoother\nBandwidth : 0.22 \n"),
paste("Ajuste3\nSplines de Regressão\nCubico\nNós : c(0.5,0.75,1.25)"))
best_span <- function(f,df){
fit.loess              <-  lowess(x = df$X,y = df$Y,f = f)$y
eqm                    <-  rmse(actual = df$Y,fit.loess)
return(c(Span = f,EQM = eqm))
}
teste = sapply(X = seq(0.001,1,0.001),FUN = best_span,df1) %>%
t %>%
as.data.frame
bf <- teste[which.min(teste$EQM),]
fit.loess              <-  lowess(x = dados$x,y = dados$y,f = bf[,1])$y
df1      <-  cbind( df,"Loess" = fit.loess) %>% as.data.frame
colnames(df1) <- c("x","y",
paste("Ajuste1\nLowess\nSpan : 0.25 \n")
#paste("Ajuste2\nKernel Smoother\nBandwidth : 0.22 \n"),
#paste("Ajuste3\nSplines de Regressão\nCubico\nNós : c(0.5,0.75,1.25)")
)
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
plot.mult.curves(df = df1,title = NULL)
plot(teste$Span,teste$EQM)
kable_data(data = df_metrics,cap = "Erro Quadrático Médio para os suavizadores Loess, Kernel e Spline Cúbico",foot = NULL)
lines(teste$Span,teste$EQM)
plot(teste$Span,teste$EQM)
locv1 <- function(x1, y1, nd, span, ntrial)
{
locvgcv <- function(sp, x1, y1)
{
nd <- length(x1)
assign("data1", data.frame(xx1 = x1, yy1 = y1))
fit.lo <- loess(yy1 ~ xx1, data = data1, span = sp, family = "gaussian", degree = 2, surface = "direct")
res <- residuals(fit.lo)
dhat2 <- function(x1, sp)
{
nd2 <- length(x1)
diag1 <- diag(nd2)
dhat <- rep(0, length = nd2)
for(jj in 1:nd2){
y2 <- diag1[, jj]
assign("data1", data.frame(xx1 = x1, yy1 = y2))
fit.lo <- loess(yy1 ~ xx1, data = data1, span = sp, family = "gaussian", degree = 2, surface = "direct")
ey <- fitted.values(fit.lo)
dhat[jj] <- ey[jj]
}
return(dhat)
}
dhat <- dhat2(x1, sp)
trhat <- sum(dhat)
sse <- sum(res^2)
cv <- sum((res/(1 - dhat))^2)/nd
gcv <- sse/(nd * (1 - (trhat/nd))^2)
return(gcv)
}
gcv <- lapply(as.list(span1), locvgcv, x1 = x1, y1 = y1)
#cvgcv <- unlist(cvgcv)
#cv <- cvgcv[attr(cvgcv, "names") == "cv"]
#gcv <- cvgcv[attr(cvgcv, "names") == "gcv"]
return(gcv)
}
nd <- length(Edge2$Distance)
nd <- length(df1$x)
xx <- df1$x
yy <- df1$y
ntrial <- 50
span1 <- seq(from = 0.5, by = 0.01, length = ntrial)
output.lo <- locv1(xx, yy, nd, span1, ntrial)
#cv <- output.lo
gcv <- output.lo
plot(span1, gcv, type = "n", xlab = "span", ylab = "GCV")
points(span1, gcv, pch = 3)
lines(span1, gcv, lwd = 2)
gpcvmin <- seq(along = gcv)[gcv == min(gcv)]
nd <- length(df1$x)
xx <- df1$x
yy <- df1$y
ntrial <- 50
span1
nd <- length(df1$x)
xx <- df1$x
yy <- df1$y
ntrial <- 50
span1 <- seq(from = 0.001, by = 0.001, length = ntrial)
output.lo <- locv1(xx, yy, nd, span1, ntrial)
ntrial <- 50
span1 <- seq(from = 0.01, by = 0.01, length = ntrial)
output.lo <- locv1(xx, yy, nd, span1, ntrial)
#cv <- output.lo
gcv <- output.lo
gcv
plot(span1, gcv, type = "n", xlab = "span", ylab = "GCV")
points(span1, gcv, pch = 3)
plot(span1, gcv, type = "n", xlab = "span", ylab = "GCV")
points(span1, gcv, pch = 3)
plot(span1, gcv, type = "n", xlab = "span", ylab = "GCV")
points(span1, gcv, pch = 3)
lines(span1, gcv, lwd = 2)
gpcvmin <- seq(along = gcv)[gcv == min(gcv)]
locv1 <- function(x1, y1, nd, span, ntrial)
{
locvgcv <- function(sp, x1, y1)
{
nd <- length(x1)
assign("data1", data.frame(xx1 = x1, yy1 = y1))
fit.lo <- loess(yy1 ~ xx1, data = data1, span = sp, family = "gaussian", degree = 2, surface = "direct")
res <- residuals(fit.lo)
dhat2 <- function(x1, sp)
{
nd2 <- length(x1)
diag1 <- diag(nd2)
dhat <- rep(0, length = nd2)
for(jj in 1:nd2){
y2 <- diag1[, jj]
assign("data1", data.frame(xx1 = x1, yy1 = y2))
fit.lo <- loess(yy1 ~ xx1, data = data1, span = sp, family = "gaussian", degree = 2, surface = "direct")
ey <- fitted.values(fit.lo)
dhat[jj] <- ey[jj]
}
return(dhat)
}
dhat <- dhat2(x1, sp)
trhat <- sum(dhat)
sse <- sum(res^2)
cv <- sum((res/(1 - dhat))^2)/nd
gcv <- sse/(nd * (1 - (trhat/nd))^2)
return(gcv)
}
gcv <- sapply(as.list(span1), locvgcv, x1 = x1, y1 = y1)
#cvgcv <- unlist(cvgcv)
#cv <- cvgcv[attr(cvgcv, "names") == "cv"]
#gcv <- cvgcv[attr(cvgcv, "names") == "gcv"]
return(gcv)
}
nd <- length(df1$x)
xx <- df1$x
yy <- df1$y
ntrial <- 50
span1 <- seq(from = 0.01, by = 0.01, length = ntrial)
output.lo <- locv1(xx, yy, nd, span1, ntrial)
#cv <- output.lo
gcv <- output.lo
plot(span1, gcv, type = "n", xlab = "span", ylab = "GCV")
points(span1, gcv, pch = 3)
plot(span1, gcv, type = "n", xlab = "span", ylab = "GCV")
points(span1, gcv, pch = 3)
lines(span1, gcv, lwd = 2)
gpcvmin <- seq(along = gcv)[gcv == min(gcv)]
spangcv <- span1[pgcvmin]
gpcvmin <- seq(along = gcv)[gcv == min(gcv)]
spangcv <- span1[gpcvmin]
gcvmin <- cv[pgcvmin]
gcvmin <- cv[gpcvmin]
gpcvmin <- seq(along = gcv)[gcv == min(gcv)]
gpcvmin
gcv
gcv == min(gcv)
gpcvmin <- seq(along = gcv)[gcv == min(gcv,na.rm = T)]
gpcvmin
spangcv <- span1[pgcvmin]
gpcvmin <- seq(along = gcv)[gcv == min(gcv,na.rm = T)]
spangcv <- span1[gpcvmin]
spangcv
gcvmin <- cv[pgcvmin]
spangcv
best_span <- function(f,df){
fit.loess              <-  lowess(x = df$X,y = df$Y,f = f)$y
eqm                    <-  rmse(actual = df$Y,fit.loess)
return(c(Span = f,EQM = eqm))
}
teste = sapply(X = seq(0.001,1,0.001),FUN = best_span,df1) %>%
t %>%
as.data.frame
# best_span <- function(f,df){
#
#   fit.loess              <-  lowess(x = df$X,y = df$Y,f = f)$y
#   eqm                    <-  rmse(actual = df$Y,fit.loess)
#   return(c(Span = f,EQM = eqm))
# }
#
# teste = sapply(X = seq(0.001,1,0.001),FUN = best_span,df1) %>%
#   t %>%
#   as.data.frame
#
# bf <- teste[which.min(teste$EQM),]
fit.loess              <-  lowess(x = dados$x,y = dados$y,f = 0.13)$y
df1      <-  cbind( df,"Loess" = fit.loess) %>% as.data.frame
colnames(df1) <- c("x","y",
paste("Ajuste1\nLowess\nSpan : 0.25 \n")
#paste("Ajuste2\nKernel Smoother\nBandwidth : 0.22 \n"),
#paste("Ajuste3\nSplines de Regressão\nCubico\nNós : c(0.5,0.75,1.25)")
)
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
plot.mult.curves(df = df1,title = NULL)
#plot(teste$Span,teste$EQM)
points(spangcv, gcvmin, cex = 1, pch = 15)
gcvmin <- cv[pgcvmin]
gcvmin <- cv[gpcvmin]
gcvmin <- gcv[gpcvmin]
points(spangcv, gcvmin, cex = 1, pch = 15)
nd <- length(df1$x)
xx <- df1$x
yy <- df1$y
ntrial <- 50
span1 <- seq(from = 0.01, by = 0.01, length = ntrial)
output.lo <- locv1(xx, yy, nd, span1, ntrial)
#cv <- output.lo
gcv <- output.lo
plot(span1, gcv, type = "n", xlab = "span", ylab = "GCV")
points(span1, gcv, pch = 3)
lines(span1, gcv, lwd = 2)
gpcvmin <- seq(along = gcv)[gcv == min(gcv,na.rm = T)]
spangcv <- span1[gpcvmin]
gcvmin <- gcv[gpcvmin]
points(spangcv, gcvmin, cex = 1, pch = 15)
nd <- length(df1$x)
xx <- df1$x
yy <- df1$y
ntrial <- 50
span1 <- seq(from = 0.1, by = 0.01, length = ntrial)
output.lo <- locv1(xx, yy, nd, span1, ntrial)
#cv <- output.lo
gcv <- output.lo
plot(span1, gcv, type = "n", xlab = "span", ylab = "GCV")
points(span1, gcv, pch = 3)
lines(span1, gcv, lwd = 2)
gpcvmin <- seq(along = gcv)[gcv == min(gcv,na.rm = T)]
spangcv <- span1[gpcvmin]
gcvmin <- gcv[gpcvmin]
points(spangcv, gcvmin, cex = 1, pch = 15)
