library(ISLR)
set.seed(103159)
df <- data.frame(x = x,y = y)
tr= 1:nrow(df)
dftr= df[tr,]
number_of_bins = seq(2,50)
cv.errors = matrix( NA, k, length(number_of_bins) )
# x1 <- with(df, cut(x,2))
# df_cut <- data.frame(y = df$y, x = x1)
# t<- df[tr==72,]
# fittest<-glm(y ~ x, data=df_cut[tr!=72,])
# predict( fittest, newdata=data.frame(x = df_cut[tr==72,c("x")]) )
for( i in number_of_bins){ # for each number of knots to test
for( j in tr ){ # for each fold
x1 <- with(dados, cut(x,i))
df_cut <- data.frame(y = df$y, x = x1)
fit.bin <- glm(y ~ x, data=df_cut[tr!=j,])
bin.pred = predict( fit.bin, newdata=data.frame(x = df_cut[tr==j,c("x")]) )
cv.errors[j,i] = mean( ( df_cut[tr==2,]$y - bin.pred )^2 ) }
}
1:nrow(df)
library(splines)
library(ISLR)
set.seed(103159)
df <- data.frame(x = x,y = y)
tr= 1:nrow(df)
dftr= df[tr,]
number_of_bins = seq(2,50)
cv.errors = matrix( NA, k, length(number_of_bins) )
# x1 <- with(df, cut(x,2))
# df_cut <- data.frame(y = df$y, x = x1)
# t<- df[tr==72,]
# fittest<-glm(y ~ x, data=df_cut[tr!=72,])
# predict( fittest, newdata=data.frame(x = df_cut[tr==72,c("x")]) )
for( i in number_of_bins){ # for each number of knots to test
for( j in tr ){ # for each fold
x1 <- with(dados, cut(x,i))
df_cut <- data.frame(y = df$y, x = x1)
fit.bin <- glm(y ~ x, data=df_cut[tr!=j,])
bin.pred = predict( fit.bin, newdata=data.frame(x = df_cut[tr==j,c("x")]) )
cv.errors[j,i] = mean( ( df_cut[tr==j,]$y - bin.pred )^2 ) }
}
library(splines)
library(ISLR)
set.seed(103159)
df <- data.frame(x = x,y = y)
tr= 1:nrow(df)
dftr= df[tr,]
number_of_bins = seq(2,50)
cv.errors = matrix( NA, k, length(number_of_bins) )
# x1 <- with(df, cut(x,2))
# df_cut <- data.frame(y = df$y, x = x1)
# t<- df[tr==72,]
# fittest<-glm(y ~ x, data=df_cut[tr!=72,])
# predict( fittest, newdata=data.frame(x = df_cut[tr==72,c("x")]) )
for( i in number_of_bins){ # for each number of knots to test
for( j in tr ){ # for each fold
x1 <- with(dados, cut(x,i))
df_cut <- data.frame(y = df$y, x = x1)
fit.bin <- glm(y ~ x, data=df_cut[tr!=j,])
bin.pred = predict( fit.bin, newdata=data.frame(x = df_cut[tr==j,c("x")]) )
cv.errors[j,i-1] = mean( ( df_cut[tr==j,]$y - bin.pred )^2 ) }
}
library(splines)
library(ISLR)
set.seed(103159)
df <- data.frame(x = x,y = y)
tr= 1:nrow(df)
dftr= df[tr,]
number_of_bins = seq(2,50)
cv.errors = matrix( NA, k, length(number_of_bins) )
# x1 <- with(df, cut(x,2))
# df_cut <- data.frame(y = df$y, x = x1)
# t<- df[tr==72,]
# fittest<-glm(y ~ x, data=df_cut[tr!=72,])
# predict( fittest, newdata=data.frame(x = df_cut[tr==72,c("x")]) )
for( i in number_of_bins){ # for each number of knots to test
for( j in tr ){ # for each fold
x1 <- with(dados, cut(x,i))
df_cut <- data.frame(y = df$y, x = x1)
fit.bin <- glm(y ~ x, data=df_cut[tr!=j,])
bin.pred = predict( fit.bin, newdata=data.frame(x = df_cut[tr==j,c("x")]) )
cv.errors[j,(i-1)] = mean( ( df_cut[tr==j,]$y - bin.pred )^2 ) }
}
library(splines)
library(ISLR)
set.seed(103159)
df <- data.frame(x = x,y = y)
tr= 1:nrow(df)
dftr= df[tr,]
number_of_bins = seq(2,50)
cv.errors = matrix( NA, k, length(number_of_bins) )
# x1 <- with(df, cut(x,2))
# df_cut <- data.frame(y = df$y, x = x1)
# t<- df[tr==72,]
# fittest<-glm(y ~ x, data=df_cut[tr!=72,])
# predict( fittest, newdata=data.frame(x = df_cut[tr==72,c("x")]) )
for( i in number_of_bins){ # for each number of knots to test
for( j in tr ){ # for each fold
x1 <- with(dados, cut(x,i))
df_cut <- data.frame(y = df$y, x = x1)
fit.bin <- glm(y ~ x, data=df_cut[tr!=j,])
bin.pred = predict( fit.bin, newdata=data.frame(x = df_cut[tr==j,c("x")]) )
cv.errors[j,(i-1)] = mean( ( df_cut$y[tr==j] - bin.pred )^2 ) }
}
library(splines)
library(ISLR)
set.seed(103159)
df <- data.frame(x = x,y = y)
tr= 1:nrow(df)
dftr= df[tr,]
number_of_bins = seq(2,50)
cv.errors = matrix( NA,nrow =  nrow(df), ncol = length(number_of_bins) )
# x1 <- with(df, cut(x,2))
# df_cut <- data.frame(y = df$y, x = x1)
# t<- df[tr==72,]
# fittest<-glm(y ~ x, data=df_cut[tr!=72,])
# predict( fittest, newdata=data.frame(x = df_cut[tr==72,c("x")]) )
for( i in number_of_bins){ # for each number of knots to test
for( j in tr ){ # for each fold
x1 <- with(dados, cut(x,i))
df_cut <- data.frame(y = df$y, x = x1)
fit.bin <- glm(y ~ x, data=df_cut[tr!=j,])
bin.pred = predict( fit.bin, newdata=data.frame(x = df_cut[tr==j,c("x")]) )
cv.errors[j,(i-1)] = mean( ( df_cut$y[tr==j] - bin.pred )^2 ) }
}
cv.errors.mean = apply(cv.errors,2,mean)
cv.errors.stderr = apply(cv.errors,2,sd)/sqrt(nrow(dftr)-1)
min.cv.index = which.min( cv.errors.mean )
cv.errors.mean[min.cv.index]
one_se_up_value = ( cv.errors.mean+cv.errors.stderr )[min.cv.index]
# Set up the x-y limits for plotting:
min_lim=min( one_se_up_value, cv.errors.mean, cv.errors.mean-cv.errors.stderr, cv.errors.mean+cv.errors.stderr ) * 0.9
max_lim=max( one_se_up_value, cv.errors.mean, cv.errors.mean-cv.errors.stderr, cv.errors.mean+cv.errors.stderr ) * 1.1
df <- data.frame(x = x, y = y)
df1 <- data.frame(x = number_of_bins, y = cv.errors.mean,EQM = cv.errors.mean)
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
p3<-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM")+
geom_vline(xintercept = min.cv.index,color ="red")+
annotate("text",x = min.cv.index+0.05,y = max(cv.errors.mean),label=min.cv.index) +
axis.theme()
# plot( number_of_bins, cv.errors.mean, ylim=c(min_lim,max_lim), pch=19, type='b', xlab='number of cut bins', ylab='CV estimate of the prediction error' )
# lines( number_of_bins, cv.errors.mean-cv.errors.stderr, lty='dashed' )
# lines( number_of_bins, cv.errors.mean+cv.errors.stderr, lty='dashed' )
# abline( h=one_se_up_value, col='red' )
p3
cv.errors.mean
cv.errors
View(cv.errors)
which.min( cv.errors.mean )
cv.errors.mean
p3
library(splines)
library(ISLR)
set.seed(103159)
df <- data.frame(x = x,y = y)
tr= 1:nrow(df)
dftr= df[tr,]
number_of_bins = seq(1,50)
cv.errors = matrix( NA,nrow =  nrow(df), ncol = length(number_of_bins) )
# x1 <- with(df, cut(x,2))
# df_cut <- data.frame(y = df$y, x = x1)
# t<- df[tr==72,]
# fittest<-glm(y ~ x, data=df_cut[tr!=72,])
# predict( fittest, newdata=data.frame(x = df_cut[tr==72,c("x")]) )
for( i in number_of_bins){ # for each number of knots to test
for( j in tr ){ # for each fold
x1 <- with(dados, cut(x,i))
df_cut <- data.frame(y = df$y, x = x1)
fit.bin <- glm(y ~ x, data=df_cut[tr!=j,])
bin.pred = predict( fit.bin, newdata=data.frame(x = df_cut[tr==j,c("x")]) )
cv.errors[j,(i-1)] = mean( ( df_cut$y[tr==j] - bin.pred )^2 ) }
}
library(splines)
library(ISLR)
set.seed(103159)
df <- data.frame(x = x,y = y)
tr= 1:nrow(df)
dftr= df[tr,]
number_of_bins = seq(2,51)
cv.errors = matrix( NA,nrow =  nrow(df), ncol = length(number_of_bins) )
# x1 <- with(df, cut(x,2))
# df_cut <- data.frame(y = df$y, x = x1)
# t<- df[tr==72,]
# fittest<-glm(y ~ x, data=df_cut[tr!=72,])
# predict( fittest, newdata=data.frame(x = df_cut[tr==72,c("x")]) )
for( i in number_of_bins){ # for each number of knots to test
for( j in tr ){ # for each fold
x1 <- with(dados, cut(x,i))
df_cut <- data.frame(y = df$y, x = x1)
fit.bin <- glm(y ~ x, data=df_cut[tr!=j,])
bin.pred = predict( fit.bin, newdata=data.frame(x = df_cut[tr==j,c("x")]) )
cv.errors[j,(i-1)] = mean( ( df_cut$y[tr==j] - bin.pred )^2 ) }
}
cv.errors.mean = apply(cv.errors,2,mean)
cv.errors.stderr = apply(cv.errors,2,sd)/sqrt(nrow(dftr)-1)
min.cv.index = which.min( cv.errors.mean )+1
cv.errors.mean[min.cv.index]
one_se_up_value = ( cv.errors.mean+cv.errors.stderr )[min.cv.index]
# Set up the x-y limits for plotting:
min_lim=min( one_se_up_value, cv.errors.mean, cv.errors.mean-cv.errors.stderr, cv.errors.mean+cv.errors.stderr ) * 0.9
max_lim=max( one_se_up_value, cv.errors.mean, cv.errors.mean-cv.errors.stderr, cv.errors.mean+cv.errors.stderr ) * 1.1
df <- data.frame(x = x, y = y)
df1 <- data.frame(x = number_of_bins, y = cv.errors.mean,EQM = cv.errors.mean)
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
p3<-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM")+
geom_vline(xintercept = min.cv.index,color ="red")+
annotate("text",x = min.cv.index+0.05,y = max(cv.errors.mean),label=min.cv.index) +
axis.theme()
# plot( number_of_bins, cv.errors.mean, ylim=c(min_lim,max_lim), pch=19, type='b', xlab='number of cut bins', ylab='CV estimate of the prediction error' )
# lines( number_of_bins, cv.errors.mean-cv.errors.stderr, lty='dashed' )
# lines( number_of_bins, cv.errors.mean+cv.errors.stderr, lty='dashed' )
# abline( h=one_se_up_value, col='red' )
p3
p3<-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM")+
geom_vline(xintercept = min.cv.index,color ="red")+
annotate("text",x = min.cv.index+0.1,y = max(cv.errors.mean),label=min.cv.index) +
axis.theme()
p3
p3<-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM")+
geom_vline(xintercept = min.cv.index,color ="red")+
annotate("text",x = min.cv.index+1,y = max(cv.errors.mean),label=min.cv.index) +
axis.theme()
p3
p3<-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM")+
geom_vline(xintercept = min.cv.index,color ="red")+
annotate("text",x = min.cv.index+1,y = max(cv.errors.mean),label=paste0("Largura:",min.cv.index,"\nEQM:",cv.errors.mean[min.cv.index])) +
axis.theme()
p3
cv.errors.mean
p3<-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM")+
geom_vline(xintercept = min.cv.index,color ="red")+
annotate("text",x = min.cv.index+1,y = max(cv.errors.mean),label=paste0("Largura:",min.cv.index,"\nEQM:",cv.errors.mean[min.cv.index-1])) +
axis.theme()
p3
p3<-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM")+
geom_vline(xintercept = min.cv.index,color ="red")+
annotate("text",x = min.cv.index+1,y = max(cv.errors.mean),label=paste0("Largura:",min.cv.index,"\nEQM:",round(cv.errors.mean[min.cv.index-1]),2)) +
axis.theme()
p3
p3<-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM")+
geom_vline(xintercept = min.cv.index,color ="red")+
annotate("text",x = min.cv.index+1,y = max(cv.errors.mean),label=paste0("Largura:",min.cv.index/2,"\nEQM:",round(cv.errors.mean[min.cv.index-1]),2)) +
axis.theme()
p3
p3<-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM")+
geom_vline(xintercept = min.cv.index,color ="red")+
annotate("text",x = min.cv.index+1,y = max(cv.errors.mean)/2,label=paste0("Largura:",min.cv.index,"\nEQM:",round(cv.errors.mean[min.cv.index-1]),2)) +
axis.theme()
p3
p3<-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM")+
geom_vline(xintercept = min.cv.index,color ="red")+
annotate("text",x = min.cv.index+10,y = max(cv.errors.mean)/2,label=paste0("Largura:",min.cv.index,"\nEQM:",round(cv.errors.mean[min.cv.index-1]),2)) +
axis.theme()
p3
p3<-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM")+
geom_vline(xintercept = min.cv.index,color ="red")+
annotate("text",x = min.cv.index+5,y = max(cv.errors.mean)/2,label=paste0("Largura:",min.cv.index,"\nEQM:",round(cv.errors.mean[min.cv.index-1]),2)) +
axis.theme()
p3
cv.errors.mean[min.cv.index-1])
p3<-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM")+
geom_vline(xintercept = min.cv.index,color ="red")+
annotate("text",x = min.cv.index+5,y = max(cv.errors.mean)/2,label=paste0("Largura:",min.cv.index,"\nEQM:",round(cv.errors.mean[min.cv.index-1],2))) +
axis.theme()
p3
p3<-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM")+
geom_vline(xintercept = min.cv.index,color ="red")+
annotate("text",x = min.cv.index+5,y = max(cv.errors.mean)/2,label=paste0("Largura:",min.cv.index,"\nEQM:",round(cv.errors.mean[min.cv.index-1],4))) +
axis.theme()
p3
p3<-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM")+
geom_vline(xintercept = min.cv.index,color ="red")+
annotate("text",x = min.cv.index+6,y = max(cv.errors.mean)/2,label=paste0("Largura:",min.cv.index,"\nEQM:",round(cv.errors.mean[min.cv.index-1],4))) +
axis.theme()
p3
p3<-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM")+
geom_vline(xintercept = min.cv.index,color ="red")+
annotate("text",x = min.cv.index+8,y = max(cv.errors.mean)/2,label=paste0("Largura:",min.cv.index,"\nEQM:",round(cv.errors.mean[min.cv.index-1],4))) +
axis.theme()
p3
for( i in number_of_bins){ # for each number of knots to test
x1 <- with(dados, cut(x,i))
df_cut <- data.frame(y = df$y, x = x1)
fit.bin <- glm(y ~ x, data=df_cut)
bin.pred = predict( fit.bin, newdata=data.frame(x = df_cut[tr==j,c("x")]) )
cv.errors[j,(i-1)] = mean( ( fit.bin$y - fit.bin$fitted.values )^2 ) }
cv.errors
for( i in number_of_bins){ # for each number of knots to test
x1 <- with(dados, cut(x,i))
df_cut <- data.frame(y = df$y, x = x1)
fit.bin <- glm(y ~ x, data=df_cut)
bin.pred = predict( fit.bin, newdata=data.frame(x = df_cut[tr==j,c("x")]) )
mean( ( fit.bin$y - fit.bin$fitted.values )^2 ) }
for( i in number_of_bins){ # for each number of knots to test
x1 <- with(dados, cut(x,i))
df_cut <- data.frame(y = df$y, x = x1)
fit.bin <- glm(y ~ x, data=df_cut)
bin.pred = predict( fit.bin, newdata=data.frame(x = df_cut[tr==j,c("x")]) )
print(mean( ( fit.bin$y - fit.bin$fitted.values )^2 ) })
for( i in number_of_bins){ # for each number of knots to test
x1 <- with(dados, cut(x,i))
df_cut <- data.frame(y = df$y, x = x1)
fit.bin <- glm(y ~ x, data=df_cut)
bin.pred = predict( fit.bin, newdata=data.frame(x = df_cut[tr==j,c("x")]) )
print(mean( ( fit.bin$y - fit.bin$fitted.values )^2 ) )
}
v <- c()
for( i in number_of_bins){ # for each number of knots to test
x1 <- with(dados, cut(x,i))
df_cut <- data.frame(y = df$y, x = x1)
fit.bin <- glm(y ~ x, data=df_cut)
bin.pred = predict( fit.bin, newdata=data.frame(x = df_cut[tr==j,c("x")]) )
v[i] <- mean( ( fit.bin$y - fit.bin$fitted.values )^2 )
}
v
v %>% which.min
v
number_of_bins
v %>% which.min
v
for( i in 24){ # for each number of knots to test
for( j in tr ){ # for each fold
x1 <- with(dados, cut(x,i))
df_cut <- data.frame(y = df$y, x = x1)
fit.bin <- glm(y ~ x, data=df_cut[tr!=j,])
bin.pred = predict( fit.bin, newdata=data.frame(x = df_cut[tr==j,c("x")]) )
cv.errors[j,(i-1)] = mean( ( df_cut$y[tr==j] - bin.pred )^2 ) }
}
cv.errors
cv.errors.mean = apply(cv.errors,2,mean)
cv.errors.mean
for( i in 24){ # for each number of knots to test
for( j in tr ){ # for each fold
x1 <- with(dados, cut(x,i))
df_cut <- data.frame(y = df$y, x = x1)
fit.bin <- glm(y ~ x, data=df_cut[tr!=j,])
bin.pred = predict( fit.bin, newdata=data.frame(x = df_cut[tr==j,c("x")]) )
rmse = mean( ( df_cut$y[tr==j] - bin.pred )^2 ) }
}
rmse
for( j in tr ){ # for each fold
x1 <- with(dados, cut(x,24))
df_cut <- data.frame(y = df$y, x = x1)
fit.bin <- glm(y ~ x, data=df_cut[tr!=j,])
bin.pred = predict( fit.bin, newdata=data.frame(x = df_cut[tr==j,c("x")]) )
rmse = mean( ( df_cut$y[tr==j] - bin.pred )^2 ) }
rmse
for( j in tr ){ # for each fold
x1 <- with(dados, cut(x,25))
df_cut <- data.frame(y = df$y, x = x1)
fit.bin <- glm(y ~ x, data=df_cut[tr!=j,])
bin.pred = predict( fit.bin, newdata=data.frame(x = df_cut[tr==j,c("x")]) )
rmse = mean( ( df_cut$y[tr==j] - bin.pred )^2 ) }
rmse
v <- c()
for( j in tr ){ # for each fold
x1 <- with(dados, cut(x,25))
df_cut <- data.frame(y = df$y, x = x1)
fit.bin <- glm(y ~ x, data=df_cut[tr!=j,])
bin.pred = predict( fit.bin, newdata=data.frame(x = df_cut[tr==j,c("x")]) )
v[j] = mean( ( df_cut$y[tr==j] - bin.pred )^2 ) }
rmse
v
mean(v)
x1 <- with(dados, cut(x,24))
v <- c()
for( j in tr ){ # for each fold
x1 <- with(dados, cut(x,24))
df_cut <- data.frame(y = df$y, x = x1)
fit.bin <- glm(y ~ x, data=df_cut[tr!=j,])
bin.pred = predict( fit.bin, newdata=data.frame(x = df_cut[tr==j,c("x")]) )
v[j] = mean( ( df_cut$y[tr==j] - bin.pred )^2 ) }
mean(v)
library(splines)
library(ISLR)
set.seed(103159)
df <- data.frame(x = x,y = y)
tr= 1:nrow(df)
dftr= df[tr,]
number_of_bins = seq(2,51)
cv.errors = matrix( NA,nrow =  nrow(df), ncol = length(number_of_bins) )
for( i in number_of_bins){ # for each number of knots to test
for( j in tr ){ # for each fold
x1 <- with(dados, cut(x,i))
df_cut <- data.frame(y = df$y, x = x1)
fit.bin <- glm(y ~ x, data=df_cut[tr!=j,])
bin.pred = predict( fit.bin, newdata=data.frame(x = df_cut[tr==j,c("x")]) )
cv.errors[j,(i-1)] = mean( ( df_cut$y[tr==j] - bin.pred )^2 ) }
}
cv.errors.mean = apply(cv.errors,2,mean)
cv.errors.stderr = apply(cv.errors,2,sd)/sqrt(nrow(dftr)-1)
min.cv.index = which.min( cv.errors.mean )+1
cv.errors.mean[min.cv.index]
one_se_up_value = ( cv.errors.mean+cv.errors.stderr )[min.cv.index]
# Set up the x-y limits for plotting:
min_lim=min( one_se_up_value, cv.errors.mean, cv.errors.mean-cv.errors.stderr, cv.errors.mean+cv.errors.stderr ) * 0.9
max_lim=max( one_se_up_value, cv.errors.mean, cv.errors.mean-cv.errors.stderr, cv.errors.mean+cv.errors.stderr ) * 1.1
df <- data.frame(x = x, y = y)
df1 <- data.frame(x = number_of_bins, y = cv.errors.mean,EQM = cv.errors.mean)
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
p1.cv <-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM")+
geom_vline(xintercept = min.cv.index,color ="red")+
annotate("text",x = min.cv.index+8,y = max(cv.errors.mean)/2,label=paste0("Largura:",min.cv.index,"\nEQM:",round(cv.errors.mean[min.cv.index-1],4))) +
axis.theme()
library(splines)
library(ISLR)
set.seed(103159)
df <- data.frame(x = x,y = y)
tr= 1:nrow(df)
dftr= df[tr,]
number_of_bins = seq(2,51)
cv.errors = matrix( NA,nrow =  nrow(df), ncol = length(number_of_bins) )
for( i in number_of_bins){ # for each number of knots to test
for( j in tr ){ # for each fold
x1 <- with(dados, cut(x,i))
df_cut <- data.frame(y = df$y, x = x1)
fit.bin <- glm(y ~ x, data=df_cut[tr!=j,])
bin.pred = predict( fit.bin, newdata=data.frame(x = df_cut[tr==j,c("x")]) )
cv.errors[j,(i-1)] = mean( ( df_cut$y[tr==j] - bin.pred )^2 ) }
}
cv.errors.mean = apply(cv.errors,2,mean)
cv.errors.stderr = apply(cv.errors,2,sd)/sqrt(nrow(dftr)-1)
min.cv.index = which.min( cv.errors.mean )+1
cv.error.min = cv.errors.mean[min.cv.index-1]
one_se_up_value = ( cv.errors.mean+cv.errors.stderr )[min.cv.index]
# Set up the x-y limits for plotting:
min_lim=min( one_se_up_value, cv.errors.mean, cv.errors.mean-cv.errors.stderr, cv.errors.mean+cv.errors.stderr ) * 0.9
max_lim=max( one_se_up_value, cv.errors.mean, cv.errors.mean-cv.errors.stderr, cv.errors.mean+cv.errors.stderr ) * 1.1
df <- data.frame(x = x, y = y)
df1 <- data.frame(x = number_of_bins, y = cv.errors.mean,EQM = cv.errors.mean)
colnames(df1) <- c("x","y",
paste("EQM"))
df1 <- as.tibble(df1) %>%
gather(key = "variable", value = "value",-x,-y)
p1.cv <-ggplot(df1,aes(x = x,y=y))+
geom_line()+
geom_point()+
labs(x = "Binwidth",y = "EQM")+
geom_vline(xintercept = min.cv.index,color ="red")+
annotate("text",x = min.cv.index+8,y = max(cv.errors.mean)/2,label=paste0("Largura:",min.cv.index,"\nEQM:",round(cv.error.min,4))) +
axis.theme()
cv.error.min <- c()
cv.error.min[1] = cv.errors.mean[min.cv.index-1]
nas <- complete.cases(df1$RM)
library(Metrics)
df_metrics <- data.frame(Smoother = c("Bin","RM","RL", "Loess", "Kernel","Splines Grau 1","Splines Grau 3"),
EQM      =  c(cv.error.min[1],
1,
rmse(actual = df1$y,df1$RL),
rmse(actual = df1$y,df1$Loess),
rmse(actual = df1$y,df1$Kernel),
rmse(actual = df1$y,df1$`Spline Grau 1`),
rmse(actual = df1$y,df1$`Spline Cubico`)))
kable_data(data = df_metrics,cap = "\\label{tab:tab_eqm_cenario1}Erro Quadrático Médio para os suavizadores Loess, Kernel e Spline Cúbico",foot = NULL)
